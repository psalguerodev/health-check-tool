<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="properyWsCalcularPmt"
        persistent-id="wscalcularpmt" placeholder-prefix="[{"
        placeholder-suffix="}]" update-strategy="reload"/>
    <!-- Conexion Base de datos -->
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSourceSqlServer">
        <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver"/>
        <property name="url" value="[{jdbc.sqlserver.url.ds.wscalcularpmt}]/[{jdbc.sqlserver.database.ds.wscalcularpmt}];charset=iso_1"/>
        <property name="username" value="[{jdbc.sqlserver.username.ds.wscalcularpmt}]"/>
        <property name="password" value="[{jdbc.sqlserver.password.ds.wscalcularpmt}]"/>
        <property name="timeBetweenEvictionRunsMillis" value="[{jdbc.sqlserver.timeBetweenEvictionRunsMillis.ds.wscalcularpmt}]"/>
        <property name="numTestsPerEvictionRun" value="[{jdbc.sqlserver.numTestsPerEvictionRun.ds.wscalcularpmt}]"/>
        <property name="minEvictableIdleTimeMillis" value="[{jdbc.sqlserver.minEvictableIdleTimeMillis.ds.wscalcularpmt}]"/>
        <property name="maxActive" value="[{jdbc.sqlserver.maxActive.ds.wscalcularpmt}]"/>
    </bean>
    <!-- Conexion Colas AMQ -->
    <bean class="org.apache.activemq.ActiveMQConnectionFactory" id="amqConnectionFactory">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
    </bean>
    <bean class="org.apache.camel.component.jms.JmsConfiguration" id="jmsConfig">
        <property name="connectionFactory" ref="amqConnectionFactory"/>
        <property name="concurrentConsumers" value="10"/>
    </bean>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="configuration" ref="jmsConfig"/>
    </bean>
    <bean class="cl.coopeuch.integracion.calcularpmt.util.RouteFacade" id="beanRouteFacade"/>
    <camelcxf:cxfEndpoint address="/MERP/WSCalcularPMT"
        id="endpointWSCalcularPMT"
        serviceClass="cl.coopeuch.integracion.calcularpmt.wsdl.WSCalcularPMTSOAPPortType" wsdlURL="etc/wsdl/WSCalcularPMT.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
    <camelContext id="servicio-merp-calcular-pmt" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="cxf-inicio">
            <from id="inicioFromServicio" uri="cxf:bean:endpointWSCalcularPMT"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionCalcularFicticio">
                        <simple>${header.operationName} == 'calcularFicticio'</simple>
                        <to id="toCalcularFicticio" uri="direct:calcularFicticio"/>
                    </when>
                    <when id="inicioWhenOperacionCalcular">
                        <simple>${header.operationName} == 'calcular'</simple>
                        <to id="toCalcular" uri="direct:calcular"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <to id="toInicioExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="amq-inicio">
            <from id="recibeAmqPmt" uri="beanAMQ:{{amq.pmt.req}}"/>
            <doTry id="inicioAmqTry">
                <unmarshal id="inicioAmqMarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.calcularpmt.wsdl"/>
                </unmarshal>
                <setProperty id="inicioAmqSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioAmqSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.class.getSimpleName()}</simple>
                </setProperty>
                <choice id="inicioAmqChoiceOperacion">
                    <when id="inicioAmqWhenOperacionCalcularFicticio">
                        <simple>${exchangeProperty.tipoRequest} == 'CalcularFicticioRequest'</simple>
                        <to id="toAmqCalcularFicticio" uri="direct:calcularFicticio"/>
                    </when>
                    <when id="inicioAmqWhenOperacionCalcular">
                        <simple>${exchangeProperty.tipoRequest} == 'CalcularRequest'</simple>
                        <to id="toAmqCalcular" uri="direct:calcular"/>
                    </when>
                    <otherwise id="inicioAmqOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="amqThrowExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <convertBodyTo id="inicioAmqConvertTo" type="java.lang.String"/>
                <doCatch id="inicioAmqDoCatch">
                    <exception>java.lang.Exception</exception>
                    <to id="toInicioAmqExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="calcularFicticio">
            <from id="calcularFicticioFrom" uri="direct:calcularFicticio"/>
            <doTry id="calcularFicticioTry">
                <bean id="calcularFicticioToTrama"
                    method="requestCalcularFicticio" ref="beanRouteFacade"/>
                <bean id="calcularFicticioUUID"
                    method="crearJMSCorrelationId24" ref="beanRouteFacade"/>
                <to id="calcularFicticioToAmq" uri="beanAMQ:{{amq.queue.temp.int}}?preserveMessageQos=true&amp;jmsMessageType=Text&amp;replyToType=Temporary&amp;synchronous=true&amp;exchangePattern=InOut&amp;deliveryPersistent=false&amp;replyToDeliveryPersistent=false"/>
                <convertBodyTo id="calcularFicticioConvertBodyToString" type="java.lang.String"/>
                <transform id="calcularFicticioTransformBody">
                    <simple>&lt;trama&gt;${body}&lt;/trama&gt;</simple>
                </transform>
                <to id="calcularFicticioToSOAP" uri="xslt://etc/xsl/response/IOC729501O_calcular.xsl?saxon=true"/>
                <convertBodyTo id="calcular-ConvertBodyToResponse" type="cl.coopeuch.integracion.calcularpmt.wsdl.CalcularFicticioResponse"/>
                <doCatch id="calcularFicticioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <to id="toCalcularFicticioExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="calcular">
            <from id="calcularFrom" uri="direct:calcular"/>
            <doTry id="calcularTry">
                <bean id="beanSetHeaders" method="setHeaders" ref="beanRouteFacade"/>
                <to id="spSelDataCluster" uri="sql-stored:classpath:etc/sql/pa_selDataCluster.sql?outputHeader=dataClusterSelResponse&amp;dataSource=dataSourceSqlServer"/>
                <bean id="beanCalcularPmt" method="calcularPmt" ref="beanRouteFacade"/>
                <convertBodyTo id="consultarConvertBodyToResponse" type="cl.coopeuch.integracion.calcularpmt.wsdl.CalcularResponse"/>
                <doCatch id="calcularDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="calcularPropertyCodigo" propertyName="codigoError">
                        <simple>416</simple>
                    </setProperty>
                    <throwException exceptionType="java.lang.Exception"
                        id="throwExceptionCalcular" message="{{wscalcularpmt.error.416}}"/>
                    <to id="toCalcularExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.pmt.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion"
                    method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
