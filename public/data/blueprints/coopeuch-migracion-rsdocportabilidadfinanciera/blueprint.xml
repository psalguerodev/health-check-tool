<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyLocal"
        persistent-id="wsdocportabilidadfinanciera"
        placeholder-prefix="[{" placeholder-suffix="}]" update-strategy="reload"/>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean
        class="cl.coopeuch.integracion.docportabilidadfinanciera.util.RouteFacade" id="beanRouteFacade"/>
    <camelcxf:cxfEndpoint address="/WSDocPortabilidadFinanciera"
        id="endpointWSDocPortabilidadFinanciera"
        loggingFeatureEnabled="true"
        serviceClass="cl.coopeuch.integracion.docportabilidadfinanciera.wsdl.WSDocPortabilidadFinancieraSOAPPortType" wsdlURL="etc/wsdl/WSDocPortabilidadFinanciera.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
    <camelcxf:rsServer address="/RSDocPortabilidadFinanciera"
        id="endpointRSDocPortabilidadFinanciera" serviceClass="cl.coopeuch.integracion.docportabilidadfinanciera.wsdl.WSDocPortabilidadFinancieraSOAPPortType"/>
    <camelcxf:rsClient
        address="[{wsdocportabilidadfinanciera.integracion.documentos.crm.endpoint}]"
        id="endpointWsDocumentosCRM" loggingFeatureEnabled="true">
        <camelcxf:providers>
            <ref component-id="jsonProvider"/>
        </camelcxf:providers>
    </camelcxf:rsClient>
    <camelcxf:rsClient
        address="[{wsdocportabilidadfinanciera.integracion.urldocumento.crm.endpoint}]"
        id="endpointWsURLDocumentosCRM" loggingFeatureEnabled="true">
        <camelcxf:providers>
            <ref component-id="jsonProvider"/>
        </camelcxf:providers>
    </camelcxf:rsClient>
    <camelcxf:rsClient
        address="[{wsdocportabilidadfinanciera.integracion.certliquidacion.crm.endpoint}]"
        id="endpointWsCertLiquidacionCRM" loggingFeatureEnabled="true">
        <camelcxf:providers>
            <ref component-id="jsonProvider"/>
        </camelcxf:providers>
    </camelcxf:rsClient>
    <bean class="org.apache.cxf.jaxrs.provider.json.JSONProvider" id="jsonProvider"/>
    <camelContext id="servicio-doc-portabilidad-financiera" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="inicio-soap">
            <from id="soapInicio" uri="cxf:bean:endpointWSDocPortabilidadFinanciera"/>
            <to id="soapToInicioWs" uri="direct:iniciows"/>
        </route>
        <route id="inicio-rest">
            <from id="restInicio" uri="cxfrs:bean:endpointRSDocPortabilidadFinanciera"/>
            <to id="restToInicioWs" uri="direct:iniciows"/>
        </route>
        <route id="cxf-inicio">
            <from id="inicioFromServicio" uri="direct:iniciows"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionConsultar">
                        <simple>${header.operationName} == 'consultar'</simple>
                        <to id="toConsultar" uri="direct:consultar"/>
                    </when>
                    <when id="inicioWhenOperacionConsultarURL">
                        <simple>${header.operationName} == 'consultarURL'</simple>
                        <to id="toConsultarURL" uri="direct:consultarURL"/>
                    </when>
                    <when id="inicioWhenOperacionConsultarCertLiquidacion">
                        <simple>${header.operationName} == 'consultarCertLiquidacion'</simple>
                        <to id="toConsultarCertLiq" uri="direct:consultarCertLiquidacion"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="consultar">
            <from id="consultarFrom" uri="direct:consultar"/>
            <doTry id="consultarTry">
                <removeHeaders id="consultarHeaders" pattern="*"/>
                <setBody id="consultarBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <choice id="_consultarChoice1">
                    <when id="_when1Consultar">
                        <simple>${body.idPortabilidad} == ''</simple>
                        <throwException
                            exceptionType="java.lang.IllegalArgumentException" id="validaParametrosEntradaConsultarException"/>
                    </when>
                </choice>
                <setProperty id="consultarUrl" propertyName="urlCreate">
                    <simple>{{wsdocportabilidadfinanciera.integracion.documentos.crm.endpoint}}/${body.idPortabilidad}/documentos</simple>
                </setProperty>
                <setHeader headerName="CamelDestinationOverrideUrl" id="setUrlCreate">
                    <simple>${exchangeProperty.urlCreate}</simple>
                </setHeader>
                <setHeader headerName="Exchange.HTTP_METHOD" id="consultarSetHeaderMethod">
                    <constant>GET</constant>
                </setHeader>
                <toD id="consultar-ext-to" uri="cxfrs://bean://endpointWsDocumentosCRM?maxClientCacheSize=0"/>
                <convertBodyTo id="consultarBodyToString" type="java.lang.String"/>
                <bean id="consultarResponse"
                    method="generarResponseConsultar" ref="beanRouteFacade"/>
                <choice id="_choice1">
                    <when id="_when1">
                        <simple>${headers.validacion}</simple>
                        <setProperty id="consultarCodigoError" propertyName="codigoError">
                            <constant>516</constant>
                        </setProperty>
                        <to id="consultarExcepcion" uri="direct:excepcion"/>
                        <stop id="_stop2"/>
                    </when>
                </choice>
                <doCatch id="doCatchIllegalArgumentException">
                    <exception>java.lang.IllegalArgumentException</exception>
                    <setProperty
                        id="setCodigoConsultarIllegalArgumentException" propertyName="codigoError">
                        <constant>495</constant>
                    </setProperty>
                    <to id="toConsultarIllegalArgumentException" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="consultarCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="consultarCodigoError" propertyName="codigoError">
                        <constant>516</constant>
                    </setProperty>
                    <to id="consultarExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="consultarURL">
            <from id="consultarURLFrom" uri="direct:consultarURL"/>
            <doTry id="consultarURLTry">
                <removeHeaders id="consultarURLHeaders" pattern="*"/>
                <setBody id="consultarURLBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <choice id="_consultarURLChoice1">
                    <when id="_when1ConsultarURL">
                        <simple>${body.pathDocumento} == ''</simple>
                        <throwException
                            exceptionType="java.lang.IllegalArgumentException" id="validaParametrosEntradaConsultarURLException"/>
                    </when>
                </choice>
                <setProperty id="opeConsultarURL" propertyName="urlCreateDocumentos">
                    <simple>{{wsdocportabilidadfinanciera.integracion.urldocumento.crm.endpoint}}/${body.pathDocumento}</simple>
                </setProperty>
                <setHeader headerName="CamelDestinationOverrideUrl" id="setUrlCreateDocumentos">
                    <simple>${exchangeProperty.urlCreateDocumentos}</simple>
                </setHeader>
                <setHeader headerName="Exchange.HTTP_METHOD" id="consultarURLSetHeaderMethod">
                    <constant>GET</constant>
                </setHeader>
                <toD id="consultarURL-ext-to" uri="cxfrs://bean://endpointWsURLDocumentosCRM?maxClientCacheSize=0"/>
                <convertBodyTo id="consultarURLBodyToString" type="java.lang.String"/>
                <bean id="consultarURLDocumentosResponse"
                    method="generarResponseConsultarURL" ref="beanRouteFacade"/>
                <choice id="_choice2">
                    <when id="_when2">
                        <simple>${headers.validacion}</simple>
                        <setProperty id="consultarURLCodigoError" propertyName="codigoError">
                            <constant>516</constant>
                        </setProperty>
                        <to id="consultarURLExcepcion" uri="direct:excepcion"/>
                        <stop id="_stop1"/>
                    </when>
                </choice>
                <doCatch id="doCatchConsultarURLIllegalArgumentException">
                    <exception>java.lang.IllegalArgumentException</exception>
                    <setProperty
                        id="setCodigoConsultarURLIllegalArgumentException" propertyName="codigoError">
                        <constant>516</constant>
                    </setProperty>
                    <to id="toConsultarURLIllegalArgumentException" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="consultarURLDocumentosCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="consultarURLCodigoError" propertyName="codigoError">
                        <constant>516</constant>
                    </setProperty>
                    <to id="consultarURLExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="consultarCertLiquidacion">
            <from id="consultarCertLiquidacionFrom" uri="direct:consultarCertLiquidacion"/>
            <doTry id="consultarCertLiquidacionTry">
                <removeHeaders id="consultarCertLiquidacionHeaders" pattern="*"/>
                <setBody id="consultarCertLiquidacionBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <bean id="consultarCertLiquidacionRequest"
                    method="generarRequestConsultarCertLiquidacionRest" ref="beanRouteFacade"/>
                <setProperty id="ConsultarCertLiquidacionUrl" propertyName="urlCreateCert">
                    <simple>{{wsdocportabilidadfinanciera.integracion.certliquidacion.crm.endpoint}}</simple>
                </setProperty>
                <setHeader headerName="CamelDestinationOverrideUrl" id="setUrlCreateCert">
                    <simple>${exchangeProperty.urlCreate}</simple>
                </setHeader>
                <setHeader headerName="Exchange.HTTP_METHOD" id="ConsultarCertLiquidacionSetHeaderMethod">
                    <constant>POST</constant>
                </setHeader>
                <marshal id="ConsultarCertLiquidacionRequestMarshal">
                    <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.integracion.docportabilidadfinanciera.rest.RequestSolicitarCertLiquidacionFinal"/>
                </marshal>
                <convertBodyTo
                    id="convertBodyToConsultarCertLiquidacion" type="java.lang.String"/>
                <to id="ConsultarCertLiquidacion-ext-to" uri="cxfrs://bean://endpointWsCertLiquidacionCRM?maxClientCacheSize=0"/>
                <convertBodyTo id="ConsultarCertLiquidacionBodyToString" type="java.lang.String"/>
                <bean id="ConsultarCertLiquidacionResponse"
                    method="generarResponseConsultarCertLiquidacion" ref="beanRouteFacade"/>
                <choice id="_choice3">
                    <when id="_when3">
                        <simple>${headers.validacion}</simple>
                        <setProperty id="consultarCertCodigoError" propertyName="codigoError">
                            <constant>516</constant>
                        </setProperty>
                        <to id="consultarCertExcepcion" uri="direct:excepcion"/>
                        <stop id="_stop3"/>
                    </when>
                </choice>
                <doCatch id="solicitarCertLiquidacionDoCatchIllegalArgumentException">
                    <exception>java.lang.IllegalArgumentException</exception>
                    <setProperty
                        id="setCodigoConsultarCertLiquidacionIllegalArgumentException" propertyName="codigoError">
                        <constant>495</constant>
                    </setProperty>
                    <to
                        id="toConsultarCertLiquidacionIllegalArgumentException" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="ConsultarCertLiquidacionCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty
                        id="ConsultarCertLiquidacionCodigoError" propertyName="codigoError">
                        <constant>517</constant>
                    </setProperty>
                    <setProperty
                        id="ConsultarCertLiquidacionDescException" propertyName="descException">
                        <simple>${exception}</simple>
                    </setProperty>
                    <log id="_log1" message="\nERROR:${exception}\nENTRADA:${body}"/>
                    <to id="ConsultarCertLiquidacionDescExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion"
                    method="excepcionConsultar" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
