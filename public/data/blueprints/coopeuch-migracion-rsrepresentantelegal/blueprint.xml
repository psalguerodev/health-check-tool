<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder
		id="propertyServicioAutenticacion"
		persistent-id="wsrepresentantelegal" placeholder-prefix="[{"
		placeholder-suffix="}]" update-strategy="reload" />
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean class="cl.coopeuch.integracion.representantelegal.util.RouteFacade" id="beanRouteFacade"/>
    <camelcxf:cxfEndpoint address="/WSRepresentanteLegal"
        id="endpointWSRepresentanteLegal"
        serviceClass="cl.coopeuch.integracion.representantelegal.wsdl.WSRepresentanteLegalSOAPPortType" wsdlURL="etc/wsdl/WSRepresentanteLegal.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
    <camelcxf:rsServer address="/RSRepresentanteLegal"
        id="endpointRSRepresentanteLegal" serviceClass="cl.coopeuch.integracion.representantelegal.wsdl.WSRepresentanteLegalSOAPPortType"/>
    <camelContext id="servicio-representante-legal" xmlns="http://camel.apache.org/schema/blueprint">
       <route id="_routeCola">
			<from id="_fromCola"
				uri="beanAMQ:queue:{{colas.servicio.representante.legal.in.temp}}?preserveMessageQos=true" />
			<bean id="crearUUID-Cola" method="crearJMSCorrelationId24" ref="beanRouteFacade"/>
			<to id="_toInicioColas" uri="direct:inicio" />
		</route>
        <route id="inicio-soap">
            <from id="soapInicio" uri="cxf:bean:endpointWSRepresentanteLegal"/>
            <to id="soapToInicioWs" uri="direct:iniciows"/>
        </route>
        <route id="inicio-rest">
            <from id="restInicio" uri="cxfrs:bean:endpointRSRepresentanteLegal"/>
            <to id="restToInicioWs" uri="direct:iniciows"/>
        </route>
        <route id="cxf-inicio">
            <from id="inicioFromServicio" uri="direct:iniciows"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <bean id="obtenerDatosOperacionBean"
                    method="obtenerDatosOperacion" ref="beanRouteFacade"/>
                <log message="operationName: ${header.operationName}"></log>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionCrear">
                        <simple>${header.operationName} == 'crear'</simple>
                        <choice>
                        	<when>
                        		<simple>${exchangeProperty.validaRutCliente} == 'Correcto'</simple>
                        		<choice>
                        			<when>
                        				<simple>${exchangeProperty.validaRutRepresentanteLegal} == 'Correcto'</simple>
                        				<to id="toCrear" uri="direct:crear"/>
                        			</when>
                        			<otherwise>
                       				  	<setProperty id="CodigoError-validaRutRepresentanteLegal" propertyName="codigoError">
				                            <constant>20</constant>
				                        </setProperty>	
                       				 	<throwException exceptionType="java.lang.UnsupportedOperationException"
                                    		id="throwException-ValidaRutRepresentateLegal" message="El rut es invalido"/>
                                    	<stop id="_stop2"/>	
                        			</otherwise>                        			
                        		</choice>
                        	</when>
                        	<otherwise>
                       		 	<setProperty id="CodigoError-validaRutCliente" propertyName="codigoError">
		                            <constant>21</constant>
		                        </setProperty>	
                       		 	<throwException exceptionType="java.lang.UnsupportedOperationException"
                                    		id="throwException-ValidaRutCliente" message="El rut es invalido"/>
                                <stop id="_stop"/>	
                        	</otherwise>
                       	</choice>                        
                    </when>      
                     <when id="inicioWhenOperacionEliminar">
                        <simple>${header.operationName} == 'eliminar'</simple>
                        <choice>
                        	<when>
                        		<simple>${exchangeProperty.validaRutCliente} == 'Correcto'</simple>
                        		<choice>
                        			<when>
                        				<simple>${exchangeProperty.validaRutRepresentanteLegal} == 'Correcto'</simple>
                        				<to id="toEliminar" uri="direct:eliminar"/>
                        			</when>
                        			<otherwise>
                       				  	<setProperty id="CodigoError-validaRutRepresentanteLegal-Eliminar" propertyName="codigoError">
				                            <constant>20</constant>
				                        </setProperty>	
                       				 	<throwException exceptionType="java.lang.UnsupportedOperationException"
                                    		id="throwException-ValidaRutRepresentateLegal-Eliminar" message="El rut es invalido"/>
                                    	<stop id="_stop2-Eliminar"/>	
                        			</otherwise>                        			
                        		</choice>
                        	</when>
                        	<otherwise>
                       		 	<setProperty id="CodigoError-validaRutCliente" propertyName="codigoError">
		                            <constant>21</constant>
		                        </setProperty>	
                       		 	<throwException exceptionType="java.lang.UnsupportedOperationException"
                                    		id="throwException-ValidaRutCliente" message="El rut es invalido"/>
                                <stop id="_stop"/>	
                        	</otherwise>
                       	</choice>                        
                    </when>                    
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch-UnsupportedOperationException">
                    <exception>java.lang.UnsupportedOperationException</exception>                   
                    <to id="toInicioExcepcion" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
					<setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="crear">
            <from id="crearFrom" uri="direct:crear"/>
            <doTry id="crearTry">
                <setBody id="crearSetBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <marshal id="crearMarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.representantelegal.wsdl"/>
                </marshal>
                <convertBodyTo id="crearConvertBodyToString" type="java.lang.String"/>
                <bean id="crearUUID" method="crearJMSCorrelationId24" ref="beanRouteFacade"/>
                <to id="crearToXSLTrama" uri="xslt://etc/xsl/request/IOC719201I_crear.xsl"/>
                <log id="crearTrama" message="Trama generada = ${body}"/>
                <to id="crearToAmq" uri="beanAMQ:{{amq.queue.req}}?preserveMessageQos=true&amp;errorHandlerLoggingLevel=TRACE&amp;jmsMessageType=Text&amp;replyTo={{amq.queue.res}}&amp;replyToType=Shared&amp;replyToOverride={{amq.queue.res}}&amp;synchronous=true&amp;exchangePattern=InOut"/>
                <log id="crearTramaResponse" message="Trama recibida = ${body}"/>
                <transform id="crearTransformBody">
                    <simple>&lt;trama&gt;${body}&lt;/trama&gt;</simple>
                </transform>
                <to id="crearToXSLSOAP" uri="xslt://etc/xsl/response/IOC719201O_crear.xsl?saxon=true"/>
                <log message="${body}" />
				<unmarshal id="crearUnmarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.representantelegal.wsdl"/>
                </unmarshal>
				<doCatch id="crearDoCatchAMQ">
                    <exception>org.apache.camel.ExchangeTimedOutException</exception>
                    <setProperty id="crearCodigoErrorAMQ" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="toCrearExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="crearDoCatch">
                    <exception>java.lang.Exception</exception>
					<setProperty id="crearCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="crearToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        <route id="eliminar">
            <from id="eliminarFrom" uri="direct:eliminar"/>
            <doTry id="eliminarTry">
                <setBody id="eliminarSetBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <marshal id="eliminarMarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.representantelegal.wsdl"/>
                </marshal>
                <convertBodyTo id="eliminarConvertBodyToString" type="java.lang.String"/>
                <bean id="eliminarUUID" method="crearJMSCorrelationId24" ref="beanRouteFacade"/>
                <to id="eliminarToXSLTrama" uri="xslt://etc/xsl/request/IOC719401I_eliminar.xsl"/>
                <log id="eliminarTrama" message="Trama generada = ${body}"/>
                <to id="eliminarToAmq" uri="beanAMQ:{{amq.queue.req}}?preserveMessageQos=true&amp;errorHandlerLoggingLevel=TRACE&amp;jmsMessageType=Text&amp;replyTo={{amq.queue.res}}&amp;replyToType=Shared&amp;replyToOverride={{amq.queue.res}}&amp;synchronous=true&amp;exchangePattern=InOut"/>
                <log id="eliminarTramaResponse" message="Trama recibida = ${body}"/>
                <transform id="eliminarTransformBody">
                    <simple>&lt;trama&gt;${body}&lt;/trama&gt;</simple>
                </transform>
                <to id="eliminarToXSLSOAP" uri="xslt://etc/xsl/response/IOC719401O_eliminar.xsl?saxon=true"/>
                <log message="${body}" />
				<unmarshal id="eliminarUnmarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.representantelegal.wsdl"/>
                </unmarshal>
				<doCatch id="eliminarDoCatchAMQ">
                    <exception>org.apache.camel.ExchangeTimedOutException</exception>
                    <setProperty id="eliminarCodigoErrorAMQ" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="toEliminarExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="eliminarDoCatch">
                    <exception>java.lang.Exception</exception>
					<setProperty id="eliminarCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="eliminarToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
       
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion"
                    method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
