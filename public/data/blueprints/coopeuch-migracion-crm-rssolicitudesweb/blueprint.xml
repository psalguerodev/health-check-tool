<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
    xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                            http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}"/>
    <cm:property-placeholder id="propertyLocal"
        persistent-id="wssolicitudeswebcrm" placeholder-prefix="[{" placeholder-suffix="}]"/>
        
        
        
    <bean class="cl.coopeuch.integracion.utilidad.util.RouteFacade" id="beanRouteFacade"/>
    <bean class="cl.coopeuch.crm.wssolicitudesweb.exception.ErrorExcepcionInterceptor" id="ErrorExcepcionInterceptor"/>
    <bean class="cl.coopeuch.crm.wssolicitudesweb.exception.HostHeaderValidator" id="HostHeaderValidator">
    	<property name="allowedHosts" value="[{allowed.hosts}]" />
    </bean>
    
<!--     AMQ -->
     <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    
    <!--Servicios -->
    <cxf:cxfEndpoint address="/crm/WSSolicitudesWeb"
        id="fromWsSolicitudesWebSoap" loggingFeatureEnabled="true"
        serviceClass="cl.coopeuch.crm.wssolicitudesweb.SolicitudesWebSoap" wsdlURL="etc/wsdl/WSSolicitudesWeb.asmx.wsdl"/>
    <cxf:rsServer address="/crm/RSSolicitudesWeb"
        id="fromWsSolicitudesWebRest" loggingFeatureEnabled="true" serviceClass="cl.coopeuch.integracion.utilidad.rest.SolicitudesWebCRMRest">
        <cxf:inInterceptors>
        	<ref component-id="ErrorExcepcionInterceptor"/>
        	<ref component-id="HostHeaderValidator"/>
    	</cxf:inInterceptors>
     </cxf:rsServer>
        
        
        
    <!--Cliente proxy-->
    <cxf:cxfEndpoint address="[{crm.proxy.solicitudesweb.endpoint}]"
        id="toEndpointWsSolicitudesWeb" loggingFeatureEnabled="true"
        serviceClass="cl.coopeuch.crm.wssolicitudesweb.SolicitudesWebSoap" wsdlURL="etc/wsdl/WSSolicitudesWeb.asmx.wsdl"/>
    <camelContext id="servicio-crm-solicitudes-web" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="soap-inicio" streamCache="true">
            <from id="solicitudesWebFrom" uri="cxf:bean:fromWsSolicitudesWebSoap?dataFormat=RAW"/>
            <removeHeaders pattern="(?i)^x-forwarded-.*"/>
            <removeHeaders id="solicitudesWebRemoveHeaders" pattern="CamelHttp*"/>
            <to id="solicitudesWebTo" uri="cxf:bean:toEndpointWsSolicitudesWeb?dataFormat=RAW"/>
        </route>
        <route id="rest-inicio" streamCache="true">
            <from id="inicioRestFrom" uri="cxfrs:bean:fromWsSolicitudesWebRest"/>
            <removeHeaders pattern="(?i)^x-forwarded-.*"/>
            <doTry id="inicioTry">
            <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{header.operationName}</simple>
                </setProperty>
            <choice id="fromOperation">
                <when id="whenSolicitudesProductos">
                    <simple>${header.operationName} == 'solicitudesProductos'</simple>
                    <unmarshal id="unmarshalSolicitudesProductos">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesProductos"/>
                    </unmarshal>
                    <bean id="solicitudesProductosRequest"
                        method="solicitudesProductosRest" ref="beanRouteFacade"/>
                    <to id="solicitudesProductosTo" uri="cxf:bean:toEndpointWsSolicitudesWeb"/>
                    <marshal id="marshalSolicitudesProductosResponse">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesProductosResponse"/>
                    </marshal>
                </when>
                <when id="whenSolicitudesFormularios">
                    <simple>${header.operationName} == 'solicitudesFormularios'</simple>
                    <unmarshal id="unmarshalSolicitudesFormularios">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesFormularios"/>
                    </unmarshal>
                    <bean id="solicitudesFormulariosRequest"
                        method="solicitudesFormulariosRest" ref="beanRouteFacade"/>
                    <to id="solicitudesFormulariosTo" uri="cxf:bean:toEndpointWsSolicitudesWeb"/>
                    <marshal id="marshalSolicitudesFormulariosResponse">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesFormulariosResponse"/>
                    </marshal>
                </when>
                <when id="whenSolicitudesGiroVirtual">
                    <simple>${header.operationName} == 'solicitudesGiroVirtual'</simple>
                    <unmarshal id="unmarshalSolicitudesGiroVirtual">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesGiroVirtual"/>
                    </unmarshal>
                    <bean id="solicitudesGiroVirtualRequest"
                        method="solicitudesGiroVirtualRest" ref="beanRouteFacade"/>
                    <to id="solicitudesGiroVirtualTo" uri="cxf:bean:toEndpointWsSolicitudesWeb"/>
                    <marshal id="marshalSolicitudesGiroVirtualResponse">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesGiroVirtualResponse"/>
                    </marshal>
                </when>
                <when id="whenSolicitudesReferidos">
                    <simple>${header.operationName} == 'solicitudesReferidos'</simple>
                    <unmarshal id="unmarshalSolicitudesReferidos">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesReferidos"/>
                    </unmarshal>
                    <bean id="solicitudesReferidosRequest"
                        method="solicitudesReferidosRest" ref="beanRouteFacade"/>
                    <to id="solicitudesReferidosTo" uri="cxf:bean:toEndpointWsSolicitudesWeb"/>
                    <marshal id="marshalSolicitudesReferidosResponse">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesReferidosResponse"/>
                    </marshal>
                </when>
                <when id="whenSolicitudesSimulador">
                    <simple>${header.operationName} == 'solicitudesSimulador'</simple>
                    <unmarshal id="unmarshalSolicitudesSimulador">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesSimulador"/>
                    </unmarshal>
                    <bean id="solicitudesSimuladorRequest"
                        method="solicitudesSimuladorRest" ref="beanRouteFacade"/>
                    <to id="solicitudesSimuladorTo" uri="cxf:bean:toEndpointWsSolicitudesWeb"/>
                    <marshal id="marshalSolicitudesSimuladorResponse">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.crm.wssolicitudesweb.SolicitudesSimuladorResponse"/>
                    </marshal>
                </when>
            </choice>
            <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <setProperty id="mensajeErrorI" propertyName="mensajeErrorI">
                    <simple>${exception.message}</simple>
                </setProperty>
<!--                     <log message="XXXXXXXXXXAAAAAAAAAAA(((${exception.message})))"/> -->
                    
                <bean id="excepcionBeanExcepcion"
                    method="excepcionCrear" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
