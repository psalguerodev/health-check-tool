<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0" xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global" placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyWSSubidaDocumento" persistent-id="wssubidadocumento" placeholder-prefix="[{" placeholder-suffix="}]" update-strategy="reload"/>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean class="cl.coopeuch.integracion.subidadocumento.util.RouteFacade" id="beanRouteFacade"/>
    <camelcxf:rsServer address="/RSSubidaDocumento" id="endpointRSSubidaDocumento" serviceClass="cl.coopeuch.integracion.subidadocumento.wsdl.WSSubidaDocumentoSOAPPortType"/>
    <camelcxf:cxfEndpoint address="/WSSubidaDocumento" continuationTimeout="30000" id="endpointWSSubidaDocumento"
        serviceClass="cl.coopeuch.integracion.subidadocumento.wsdl.WSSubidaDocumentoSOAPPortType" wsdlURL="etc/wsdl/WSSubidaDocumento.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
    <camelContext id="servicio-subida-documentos" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="inicio-soap">
            <from id="inicioFromServicio" uri="cxf:bean:endpointWSSubidaDocumento"/>
            <to id="soapToInicioWs" uri="direct:inicio"/>
        </route>
        <route id="inicio-rest">
            <from id="restInicio" uri="cxfrs:bean:endpointRSSubidaDocumento"/>
            <to id="restToInicioWs" uri="direct:inicio"/>
        </route>
        <route id="cxf-inicio">
            <from id="inicioFromServicio" uri="direct:inicio"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionguardarS3">
                        <simple>${header.operationName} == 'guardarS3'</simple>
                        <to id="toguardarS3" uri="direct:guardarS3"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException exceptionType="java.lang.Exception" id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="guardarS3">
            <from id="guardarS3From" uri="direct:guardarS3"/>
            <doTry id="guardarS3Try">
                <bean id="subirDocumentoS3" method="subirDocumentoS3" ref="beanRouteFacade"/>
                <doCatch id="guardarS3DoCatchAmazonS3Exception">
                    <exception>com.amazonaws.services.s3.model.AmazonS3Exception</exception>
                    <setProperty id="guardarS3CodigoErrorAmazonS3Exception" propertyName="codigoError">
                        <constant>4001</constant>
                    </setProperty>
                    <setProperty id="guardarS3CodigoErrorAmazonS3ExceptionDescripcion" propertyName="errorS3">
                        <simple>${exception.getErrorMessage()}</simple>
                    </setProperty>
                    <to id="guardarS3ToExcepcionAmazonS3Exception" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="guardarS3DoCatchIOException">
                    <exception>java.io.IOException</exception>
                    <to id="guardarS3ToExcepcionIOException" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="guardarS3DoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="guardarS3CodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="guardarS3ToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion" method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
