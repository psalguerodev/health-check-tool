<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyLocal" persistent-id="wsvalidaciontarjetas"
        placeholder-prefix="[{" placeholder-suffix="}]" update-strategy="reload"/>       
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean class="cl.coopeuch.integracion.utilidad.util.RouteFacade" id="beanRouteFacade"/>
    <camelcxf:cxfEndpoint address="/WSValidacionTarjetas"
        id="endpointWSValidacionTarjetas"
        serviceClass="cl.coopeuch.integracion.utilidad.wsdl.WSValidacionTarjetasSOAPPortType" wsdlURL="etc/wsdl/WSValidacionTarjetas.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
	<camelcxf:rsServer address="/RSValidacionTarjetas"
        id="endpointRSValidacionTarjetas" serviceClass="cl.coopeuch.integracion.utilidad.wsdl.WSValidacionTarjetasSOAPPortType"/>
    
    <!-- Servicios Externos -->    
    <camelcxf:rsClient address="[{tarjeta.deb.prep.generarCVV}]" id="servicioDebitoPrepagoConsultarCVV">
        <camelcxf:providers>
            <ref component-id="jsonProvider"/>
        </camelcxf:providers>
    </camelcxf:rsClient>
    
    <camelcxf:rsClient address="[{tarjeta.credito.generarCVV}]" id="servicioCreditoConsultarCVV">
        <camelcxf:providers>
            <ref component-id="jsonProvider"/>
        </camelcxf:providers>
    </camelcxf:rsClient>
        
    <bean class="org.apache.cxf.jaxrs.provider.json.JSONProvider" id="jsonProvider"/>
        
    <camelContext id="servicio-validacion-tarjeta" xmlns="http://camel.apache.org/schema/blueprint">
		<route id="inicio-soap">
            <from id="inicioFromSoap" uri="cxf:bean:endpointWSValidacionTarjetas"/>
            <to id="soapToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="inicio-rest">
            <from id="restInicio" uri="cxfrs:bean:endpointRSValidacionTarjetas"/>
            <to id="restToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="cxf-inicio">
			<from id="inicioFromServicio" uri="direct:cxf-inicio"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <setBody id="inicioSetBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionGenerarCodigoSeguridad">
                        <simple>${header.operationName} == 'generarCodigoSeguridad'</simple>
                        <to id="toGenerarCodigoSeguridad" uri="direct:generarCodigoSeguridad"/>
                    </when>
                    <when id="inicioWhenOperacionValidarCodigoSeguridad">
                        <simple>${header.operationName} == 'validarCodigoSeguridad'</simple>
                        <to id="toValidarCodigoSeguridad" uri="direct:validarCodigoSeguridad"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        <route id="generarCodigoSeguridad">
            <from id="generarCodigoSeguridadFrom" uri="direct:generarCodigoSeguridad"/>
            <doTry id="generarCodigoSeguridadTry">
                <setProperty id="setPropertyLlavePublicaGenerarCodigoSeguridad" propertyName="tarjeta.llave.publica">
                    <simple>{{tarjeta.llave.publica}}</simple>
                </setProperty>
                <setProperty id="setPropertyClaveJWTGenerarCodigoSeguridad" propertyName="tokenJwt">
                    <simple>{{tarjeta.clave.jwt}}</simple>
                </setProperty>
                <setProperty id="setPropertyAuthorizationGenerarCodigoSeguridad" propertyName="authorization">
                    <header>Authorization</header>
                </setProperty>                                             

                <removeHeaders id="removeHeadersGenerarCodigoSeguridad" pattern="*"/>
                
                <bean id="requestGenerarCodigoSeguridad" method="requestGenerarCodigoSeguridad" ref="beanRouteFacade"/>
                
                <choice>
                	<when>
                		<simple>${property.tipoTarjeta} == "DebitPrep"</simple> 
                		<to id="toServicioDebitoPrepagoGenerarCVV" uri="cxfrs:bean:servicioDebitoPrepagoConsultarCVV"/>
                		<convertBodyTo id="generarCodigoSeguridadconvertBody" type="String"/>	
                		<setProperty id="setPropertyDebitoPrepagoResponseAZ7GenerarCodigoSeguridad" propertyName="responseAZ7GenerarCodigoSeguridad">
                    		<simple>${body}</simple>
                		</setProperty>	             		
                	</when>
                	<when>
                		<simple>${property.tipoTarjeta} == "Credit"</simple>
                		<to id="toServicioCreditoGenerarCVV" uri="cxfrs:bean:servicioCreditoConsultarCVV"/>
                		<convertBodyTo id="generarCodigoSeguridadconvertBody" type="String"/>
                		<setProperty id="setPropertyCreditoResponseAZ7GenerarCodigoSeguridad" propertyName="responseAZ7GenerarCodigoSeguridad">
                    		<simple>${body}</simple>
                		</setProperty>
                	</when>
                </choice>
                
                <bean id="responseGenerarCodigoSeguridad"
                    method="responseGenerarCodigoSeguridad" ref="beanRouteFacade"/>
               <doCatch id="generarCodigoSeguridadDoCatchIllegalArgumentException">
                    <exception>java.lang.IllegalArgumentException</exception>
                    <to id="toGenerarCodigoSeguridadIllegalArgumentException" uri="direct:excepcion"/>
                </doCatch>  
				<doCatch id="generarCodigoSeguridadDoCatchAMQ">
                    <exception>org.apache.camel.ExchangeTimedOutException</exception>
                    <setProperty id="generarCodigoSeguridadCodigoErrorAMQ" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="toGenerarCodigoSeguridadExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="generarCodigoSeguridadDoCatch">
                    <exception>java.lang.Exception</exception>
					<setProperty id="generarCodigoSeguridadCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="generarCodigoSeguridadToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        
        <route id="validarCodigoSeguridad">
            <from id="validarCodigoSeguridadFrom" uri="direct:validarCodigoSeguridad"/>
            <doTry id="validarCodigoSeguridadTry">
                <setProperty id="setPropertyLlavePublicaValidarCodigoSeguridad" propertyName="tarjeta.llave.publica">
                    <simple>{{tarjeta.llave.publica}}</simple>
                </setProperty>
                <setProperty id="setPropertyClaveJWTValidarCodigoSeguridad" propertyName="tokenJwt">
                    <simple>{{tarjeta.clave.jwt}}</simple>
                </setProperty>
                <setProperty id="setPropertyAuthorizationValidarCodigoSeguridad" propertyName="authorization">
                    <header>Authorization</header>
                </setProperty>                                             

                <removeHeaders id="removeHeadersValidarCodigoSeguridad" pattern="*"/>
                
            	<bean id="requestValidarCodigoSeguridad" method="requestValidarCodigoSeguridad" ref="beanRouteFacade"/>
                
                <choice>
                	<when>
                		<simple>${property.tipoTarjeta} == "DebitPrep"</simple> 
                		<to id="toServicioDebitoPrepagoValidarCVV" uri="cxfrs:bean:servicioDebitoPrepagoConsultarCVV"/>
                		<convertBodyTo id="validarCodigoSeguridadconvertBody" type="String"/>	
                		<setProperty id="setPropertyDebitoPrepagoResponseAZ7ValidarCodigoSeguridad" propertyName="responseAZ7ValidarCodigoSeguridad">
                    		<simple>${body}</simple>
                		</setProperty>	             		
                	</when>
                	<when>
                		<simple>${property.tipoTarjeta} == "Credit"</simple>
                		<to id="toServicioCreditoValidarCVV" uri="cxfrs:bean:servicioCreditoConsultarCVV"/>
                		<convertBodyTo id="validarCodigoSeguridadconvertBody" type="String"/>
                		<setProperty id="setPropertyCreditoResponseAZ7ValidarCodigoSeguridad" propertyName="responseAZ7ValidarCodigoSeguridad">
                    		<simple>${body}</simple>
                		</setProperty>
                	</when>
                </choice>
                    
                <bean id="responseValidarCodigoSeguridad"
                    method="responseValidarCodigoSeguridad" ref="beanRouteFacade"/>
                
                <doCatch id="validarCodigoSeguridadDoCatchIllegalArgumentException">
                    <exception>java.lang.IllegalArgumentException</exception>
                    <to id="toValidarrCodigoSeguridadIllegalArgumentException" uri="direct:excepcion"/>
                </doCatch>      
                <doCatch id="validarCodigoSeguridadDoCatchAMQ">
                    <exception>org.apache.camel.ExchangeTimedOutException</exception>
                    <setProperty id="validarCodigoSeguridadCodigoErrorAMQ" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="toValidarCodigoSeguridadExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>    
                <doCatch id="validarCodigoSeguridadDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="validarCodigoSeguridadCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="validarCodigoSeguridadToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion"
                    method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
