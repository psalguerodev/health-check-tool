<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyServicio" persistent-id="mqnotificacionteflifa"
        placeholder-prefix="{{" placeholder-suffix="}}" update-strategy="reload"/>
    
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    
    <bean class="com.ibm.mq.jms.MQConnectionFactory" id="websphereConnectionFactory">
		<property name="transportType" value="1" />
		<property name="hostName" value="{[ibm.mq.host]}" />
		<property name="port" value="{[ibm.mq.port]}" />
		<property name="queueManager" value="{[ibm.qm.name]}" />
		<property name="useConnectionPooling" value="true" />
		<property name="channel" value="{[ibm.qm.channel]}" />
	</bean>
	<bean class="org.apache.camel.component.jms.JmsConfiguration" id="websphereConfig">
		<property name="connectionFactory" ref="websphereConnectionFactory" />
		<property name="concurrentConsumers" value="{{ibm.mq.concurrentConsumers}}" />
	</bean>
	<bean class="org.apache.camel.component.jms.JmsComponent" id="websphere">
		<property name="configuration" ref="websphereConfig" />
	</bean>
    
    <bean class="cl.coopeuch.integracion.mqnotificacionteflifa.util.RouteFacade" id="beanRouteFacade"/>
    <camelContext id="MQNotificacionTEFLIFA" xmlns="http://camel.apache.org/schema/blueprint">

		<route id="MQ-Inicio">
			<from id="recibeAMQTeflifa" uri="websphere:queue:{{amq.queue.notificacion}}?disableReplyTo=true"/>
			<to id="toAWS" uri="direct:notificacion"/>
		</route>
		
<!-- 		<route id="MQ-MOCK"> -->
<!-- 			<from id="ENVIAMQ" uri="timer://foo?delay=10000"/> -->
<!-- 			<setBody><constant>IA12  0614VI01    00000000000990000000000000990000000000000990000000000000990000000000000990032023-09-27-16.56.55.917000FUNCEDV</constant></setBody> -->
<!-- 			<log message="  Envia Mensaje Quemado para prueba  "/> -->
<!-- 			<to id="toAMQMOCK" uri="beanAMQ:{{amq.queue.notificacion}}"/> -->
<!-- 		</route> -->
        
        <route id="notificacion">
            <from id="notificacionFrom" uri="direct:notificacion"/>
            <doTry id="notificacionTry">
                <convertBodyTo id="notificacionConvertBodyToString" type="java.lang.String"/>
                <log message="0: Trama-Cola-MQ TEFLIFA:(${body})" />
                <transform id="notificacionTransformBody">
                    <simple>&lt;trama&gt;${body}&lt;/trama&gt;</simple>
                </transform>
                <to id="notificacionToXSLSOAP" uri="xslt://etc/xsl/request/TransFormTramaToXML.xsl?saxon=true"/>
				
				<log message="1: Transforma mensaje recibido del AMQ: (${body})"/>
				
				<unmarshal id="notificacionUnmarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.wsdl"/>
                </unmarshal>
                <bean id="transformDecimales" method="transformDecimales" ref="beanRouteFacade"/> 
                <log message="2: Unmarshall a wsdl: (${body}"/>
                <marshal>
					<json library="Jackson"></json>
				</marshal>
				<log message="3: salidaXmlFormat:(jack: (${body})" />
      			<bean id="enviaMensajeSNS" method="enviaMensajeSNS" ref="beanRouteFacade"/> 
      			<log message="4: (${body})ENVIA MENSAJE A AWS!!!!"/>
      			<stop/>      			
                
				<doCatch id="notificacionDoCatchAMQ">
                    <exception>org.apache.camel.ExchangeTimedOutException</exception>
                    <setProperty id="crearCodigoErrorAMQ" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="tonotificacionExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="notificacionDoCatch">
                    <exception>java.lang.Exception</exception>
					          <setProperty id="crearCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                <log message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS} || ${exception.message} \n\n${exception.stacktrace}" loggingLevel="ERROR"/>                                     
<!--                     <to id="notificacionToExcepcion" uri="direct:excepcion"/> -->
                </doCatch>
            </doTry>
        </route>
        
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion"
                    method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${exception.message} -- ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
