<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean class="cl.coopeuch.integracion.entidad.wsenrolamientoabonoremuneraciones.util.RouteFacade" id="beanRouteFacade"/>
    <camelcxf:cxfEndpoint address="/WSEnrolamientoAbonoRemuneraciones"
        id="endpointWSEnrolamientoAbonoRemuneraciones"
        serviceClass="cl.coopeuch.integracion.entidad.wsenrolamientoabonoremuneraciones.wsdl.WSEnrolamientoAbonoRemuneracionesSOAPPortType" wsdlURL="etc/wsdl/WSEnrolamientoAbonoRemuneraciones.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
	<camelcxf:rsServer address="/RSEnrolamientoAbonoRemuneraciones"
        id="endpointRSEnrolamientoAbonoRemuneraciones" serviceClass="cl.coopeuch.integracion.entidad.wsenrolamientoabonoremuneraciones.wsdl.WSEnrolamientoAbonoRemuneracionesSOAPPortType"/>
    <camelContext id="WSEnrolamientoAbonoRemuneraciones" xmlns="http://camel.apache.org/schema/blueprint">
		<route id="inicio-soap">
            <from id="inicioFromSoap" uri="cxf:bean:endpointWSEnrolamientoAbonoRemuneraciones"/>
            <to id="soapToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="inicio-rest">
            <from id="restInicio" uri="cxfrs:bean:endpointRSEnrolamientoAbonoRemuneraciones"/>
            <to id="restToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="cxf-inicio">
			<from id="inicioFromServicio" uri="direct:cxf-inicio"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <setBody id="inicioSetBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionCrear">
                        <simple>${header.operationName} == 'registrar'</simple>
                        <to id="toCrear" uri="direct:registrar"/>
                    </when>
                    <when id="inicioWhenOperacionActualizar">
                        <simple>${header.operationName} == 'actualizar'</simple>
                        <to id="toActualizar" uri="direct:actualizar"/>
                    </when>
                    <when id="inicioWhenOperacionConsultar">
                        <simple>${header.operationName} == 'consultar'</simple>
                        <to id="toConsultar" uri="direct:consultar"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="registrar">
            <from id="registrarFrom" uri="direct:registrar"/>
            <doTry id="registrarTry">
                <marshal id="registrarMarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.entidad.wsenrolamientoabonoremuneraciones.wsdl"/>
                </marshal>
                <convertBodyTo id="registrarConvertBodyToString" type="java.lang.String"/>
                <bean id="registrarUUID" method="crearJMSCorrelationId24" ref="beanRouteFacade"/>
                <to id="crearToXSLTrama" uri="xslt://etc/xsl/request/IOC009501I_registrar.xsl"/>
                <log id="registrarTrama" message="Trama generada = (${body})"/>
                <to id="registrarToAmq" uri="beanAMQ:{{amq.queue.req}}?preserveMessageQos=true&amp;errorHandlerLoggingLevel=TRACE&amp;jmsMessageType=Text&amp;replyTo={{amq.queue.res}}&amp;replyToType=Shared&amp;replyToOverride={{amq.queue.res}}&amp;synchronous=true&amp;exchangePattern=InOut"/>
                <log id="registrarTramaResponse" message="Trama recibida = ${body}"/>
                <transform id="crearTransformBody">
                    <simple>&lt;trama&gt;${body}&lt;/trama&gt;</simple>
                </transform>
                <to id="registrarToXSLSOAP" uri="xslt://etc/xsl/response/IOC009501O_registrar.xsl?saxon=true"/>
				<unmarshal id="registrarUnmarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.entidad.wsenrolamientoabonoremuneraciones.wsdl"/>
                </unmarshal>
				        <doCatch id="registrarDoCatchAMQ">
                    <exception>org.apache.camel.ExchangeTimedOutException</exception>
                    <setProperty id="registrarCodigoErrorAMQ" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="toregistrarExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="registrarDoCatch">
                    <exception>java.lang.Exception</exception>
					          <setProperty id="registrarCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="registrarToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="actualizar">
            <from id="actualizarFrom" uri="direct:actualizar"/>
            <doTry id="actualizarTry">
                <marshal id="actualizarMarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.entidad.wsenrolamientoabonoremuneraciones.wsdl"/>
                </marshal>
                <convertBodyTo id="actualizarConvertBodyToString" type="java.lang.String"/>
                <bean id="actualizarUUID" method="crearJMSCorrelationId24" ref="beanRouteFacade"/>
                <to id="actualizarToXSLTrama" uri="xslt://etc/xsl/request/IOC009501I_actualizar.xsl"/>
                <log id="actualizarTrama" message="Trama generada = (${body})"/>
                <to id="actualizarToAmq" uri="beanAMQ:{{amq.queue.req}}?preserveMessageQos=true&amp;errorHandlerLoggingLevel=TRACE&amp;jmsMessageType=Text&amp;replyTo={{amq.queue.res}}&amp;replyToType=Shared&amp;replyToOverride={{amq.queue.res}}&amp;synchronous=true&amp;exchangePattern=InOut"/>
                <log id="actualizarTramaResponse" message="Trama recibida = ${body}"/>
                <transform id="actualizarTransformBody">
                    <simple>&lt;trama&gt;${body}&lt;/trama&gt;</simple>
                </transform>
                <to id="actualizarToXSLSOAP" uri="xslt://etc/xsl/response/IOC009501O_actualizar.xsl?saxon=true"/>
				<unmarshal id="actualizarUnmarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.entidad.wsenrolamientoabonoremuneraciones.wsdl"/>
                </unmarshal>
				        <doCatch id="actualizarDoCatchAMQ">
                    <exception>org.apache.camel.ExchangeTimedOutException</exception>
                    <setProperty id="actualizarCodigoErrorAMQ" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="toactualizarExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="actualizarDoCatch">
                    <exception>java.lang.Exception</exception>
					          <setProperty id="actualizarCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="actualizarToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="consultar">
            <from id="consultarFrom" uri="direct:consultar"/>
            <doTry id="consultarTry">
                <marshal id="consultarMarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.entidad.wsenrolamientoabonoremuneraciones.wsdl"/>
                </marshal>
                <convertBodyTo id="consultarConvertBodyToString" type="java.lang.String"/>
                <bean id="consultarUUID" method="crearJMSCorrelationId24" ref="beanRouteFacade"/>
                <to id="consultarToXSLTrama" uri="xslt://etc/xsl/request/IOC009502I_consultar.xsl"/>
                <log id="consultarTrama" message="Trama generada = (${body})"/>
                <to id="consultarToAmq" uri="beanAMQ:{{amq.queue.req}}?preserveMessageQos=true&amp;errorHandlerLoggingLevel=TRACE&amp;jmsMessageType=Text&amp;replyTo={{amq.queue.res}}&amp;replyToType=Shared&amp;replyToOverride={{amq.queue.res}}&amp;synchronous=true&amp;exchangePattern=InOut"/>
                <transform id="consultarTransformBody">
                    <simple>&lt;trama&gt;${body}&lt;/trama&gt;</simple>
                </transform>
                 <log id="consultarTramaResponse" message="Trama recibida = (${body})"/>
                <to id="consultarToXSLSOAP" uri="xslt://etc/xsl/response/IOC009502O_consultar.xsl?saxon=true"/>
				<log id="22" message="Trama recibida = ${body}"/>
				<unmarshal id="consultarUnmarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.entidad.wsenrolamientoabonoremuneraciones.wsdl"/>
                </unmarshal>
                <log id="22" message="Trama recibida = ${body}"/>
                <doCatch id="consultarDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="consultarCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="toConsultarExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion"
                    method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
