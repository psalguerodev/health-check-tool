<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyServicio" persistent-id="wssincronizacion"
        placeholder-prefix="{{" placeholder-suffix="}}" update-strategy="reload"/>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean class="cl.coopeuch.integracion.wssincronizacion.util.RouteFacade" id="beanRouteFacade"/>
    <bean class="cl.coopeuch.integracion.wssincronizacion.util.RouteExcepcion" id="routeExcepcion"/>
    <bean class="cl.coopeuch.integracion.wssincronizacion.exception.ErrorExcepcionInterceptor" id="ErrorExcepcionInterceptor"/>
    
    
    <camelcxf:cxfEndpoint address="/crm/WSSincronizacion"
        id="endpointwsSincronizacion"
        serviceClass="cl.coopeuch.integracion.wssincronizacion.wsdl.WssincronizacionSOAPPortType" wsdlURL="etc/wsdl/WSSincronizacion.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
	<camelcxf:rsServer address="/crm/RSSincronizacion"
        id="rsendpointwsSincronizacion" serviceClass="cl.coopeuch.integracion.wssincronizacion.wsdl.WssincronizacionSOAPPortType">
        	<camelcxf:providers>
	            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
	        </camelcxf:providers>
	        <camelcxf:inInterceptors>
		        <ref component-id="ErrorExcepcionInterceptor"/>
		    </camelcxf:inInterceptors>
        </camelcxf:rsServer>
    <camelContext id="wsSincronizacion" xmlns="http://camel.apache.org/schema/blueprint">
	    <onException>
	        <exception>org.apache.camel.component.bean.validator.BeanValidationException</exception>
	        <handled>
	            <constant>true</constant>
	        </handled>
	        <log message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS} || errores: ${exception.message}" loggingLevel="ERROR"/>
	        <log message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS} || ${exception.stacktrace}" loggingLevel="DEBUG"/>
	        <removeHeaders pattern="CamelHttp*"/>
	        <setProperty propertyName="codigoError">
	            <simple>{{wssincronizacion.informarOportunidades.errorGuardarArchivo}}</simple>
	        </setProperty>
	        <setProperty propertyName="descripcionError">
	            <simple>{{wssincronizacion.informarOportunidades.error1003}}</simple>
	        </setProperty>
	        <bean method="erroresValidator" ref="routeExcepcion"/>
	        <marshal>
                <json library="Jackson"/>
            </marshal>
	        <stop/>
	    </onException> 
		
		<route id="inicio-soap">
            <from id="inicioFromSoap" uri="cxf:bean:endpointwsSincronizacion"/>
            <to id="soapToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="inicio-rest">
	        <from id="restInicio" uri="cxfrs:bean:rsendpointwsSincronizacion"/>
	        <log message="antes el bean validator ${body.getClass()} -- ${header.operationName}"/>
	        <setProperty propertyName="tipoRequest">
                <simple>$simple{body.get(0).class.getSimpleName()}</simple>
            </setProperty>
	        <setBody>
                <simple>$simple{body.get(0)}</simple>
            </setBody>
	        <to uri="bean-validator://x"/>
	        <toD id="restToInicioWs" uri="direct:${header.operationName}"/>
	    </route>
        <route id="cxf-inicio">
			<from id="inicioFromServicio" uri="direct:cxf-inicio"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <setBody id="inicioSetBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionInformarOportunidades">
                        <simple>${header.operationName} == 'informarOportunidades'</simple>
                        <to id="toConsultar" uri="direct:informarOportunidades"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <setProperty propertyName="descripcionErrorBase">
                        <constant></constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="informarOportunidades">
            <from id="informarOportunidadesFrom" uri="direct:informarOportunidades"/>
            
            <log message="${body.getArchivoBase64()}"/>
            
            <setProperty propertyName="Base64">
              <simple>${body.getArchivoBase64()}</simple>
            </setProperty>    
            <setProperty propertyName="nombreArchivo">
              <simple>${body.getNombreArchivo()}</simple>
            </setProperty>         
            <doTry id="informarOportunidadesTry">
                <bean id="transformToCsv" method="transformacionArchivo" ref="beanRouteFacade"/>
        		<log message="ARHIVO paso 1: ${body}"/>
				<bean id="enviarSmbFile" method="enviarSmbFile" ref="beanRouteFacade"/>   
				<log message="ENVIO EL ARCHIVO"/>
				<doCatch>
                    <exception>cl.coopeuch.integracion.wssincronizacion.exception.RouteException</exception>
                    <setProperty propertyName="codigoError">
                        <constant>{{wssincronizacion.informarOportunidades.errorAccederCarpeta}}</constant>
                    </setProperty>
                    <setProperty propertyName="descripcionErrorBase">
                        <simple>{{wssincronizacion.informarOportunidades.error1002}}</simple>
                    </setProperty>
                    <to uri="direct:excepcion"/>
                </doCatch>
				<doCatch>
                    <exception>cl.coopeuch.integracion.wssincronizacion.exception.EncodingException</exception>
                    <setProperty propertyName="codigoError">
                        <constant>{{wssincronizacion.informarOportunidades.errorEncoding}}</constant>
                    </setProperty>
                    <setProperty propertyName="descripcionErrorBase">
                        <simple>{{wssincronizacion.informarOportunidades.error1001}}</simple>
                    </setProperty>
                    <to uri="direct:excepcion"/>
                </doCatch>
				<doCatch>
                    <exception>cl.coopeuch.integracion.wssincronizacion.exception.ValidacionException</exception>
                    <setProperty propertyName="codigoError">
                        <constant>{{wssincronizacion.informarOportunidades.errorGuardarArchivo}}</constant>
                    </setProperty>
                    <setProperty propertyName="descripcionErrorBase">
                        <simple>{{wssincronizacion.informarOportunidades.error1003}}</simple>
                    </setProperty>
                    <to uri="direct:excepcion"/>
                </doCatch>
				<doCatch>
                    <exception>java.lang.IllegalArgumentException</exception>
                    <setProperty propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <setProperty propertyName="descripcionErrorBase">
                        <constant></constant>
                    </setProperty>
                    <to uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="consultarDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="consultarCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <setProperty propertyName="descripcionErrorBase">
                        <constant></constant>
                    </setProperty>
                    <to id="toConsultarExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
            	<log message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS} || ${exception.message}" loggingLevel="ERROR"/>
            	<log message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS} || ${exception.stacktrace}" loggingLevel="ERROR"/>
            	<setProperty id="descripcionError" propertyName="descripcionError">
                        <simple>${exception.message}</simple>
                    </setProperty>
<!--                 <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/> -->
<!--                 <marshal id="excepcionMarshalJson"> -->
<!--                     <json library="Jackson"/> -->
<!--                 </marshal> -->
<!--                 <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/> -->
<!--                 <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/> -->
                <bean id="excepcionBeanExcepcion"
                    method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
