<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd              http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyLocal"
        persistent-id="serviciodesafio" placeholder-prefix="[{"
        placeholder-suffix="}]" update-strategy="reload"/>
    <cxf:cxfEndpoint address="/ServicioDesafio"
        id="servicioDesafioPortType" loggingFeatureEnabled="true"
        serviceClass="cl.coopeuch.integracion.desafio.wsdl.DesafioPortType" wsdlURL="etc/wsdl/ServicioDesafio.wsdl"/>
    <cxf:cxfEndpoint address="[{endpoint.safesigner.card.url}]"
        id="endpointCardSafesigner" loggingFeatureEnabled="true"
        serviceClass="cl.coopeuch.integracion.desafio.card.wsdl.CardWs" wsdlURL="etc/wsdl/CardWS.wsdl"/>
    <cxf:cxfEndpoint address="[{endpoint.safesigner.auth.url}]"
                     id="endpointAuthSafesigner" loggingFeatureEnabled="true"
                     serviceClass="cl.orand.safesigner.auth.AuthenticationWs" wsdlURL="etc/wsdl/AuthWs.wsdl"/>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="AMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSourceSqlServer">
        <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver"/>
        <property name="url" value="[{jdbc.sqlserver.url.desafio}]/PortalWeb;charset=iso_1"/>
        <property name="username" value="[{jdbc.sqlserver.username.desafio}]"/>
        <property name="password" value="[{jdbc.sqlserver.password.desafio}]"/>
        <property name="timeBetweenEvictionRunsMillis" value="[{jdbc.sqlserver.timeBetweenEvictionRunsMillis.desafio}]"/>
        <property name="numTestsPerEvictionRun" value="[{jdbc.sqlserver.numTestsPerEvictionRun.desafio}]"/>
        <property name="minEvictableIdleTimeMillis" value="[{jdbc.sqlserver.minEvictableIdleTimeMillis.desafio}]"/>
        <property name="maxActive" value="[{jdbc.sqlserver.maxActive.desafio}]"/>
    </bean>
    <bean class="cl.coopeuch.util.error.GenerarErrorConexion" id="generarErrorConexion"/>
    <cxf:rsServer address="/RSDesafio" id="desafioRest" serviceClass="cl.coopeuch.desafio.rest.DesafioRest"/>
    <bean class="cl.coopeuch.integracion.desafio.util.RouteFacade" id="routeFacade"/>
    <camelContext id="servicio-desafio" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="_routeCola">
            <from id="_fromCola" uri="AMQ:queue:{{colas.servicio.desafio.in.temp}}?preserveMessageQos=true"/>
            <bean beanType="cl.coopeuch.util.jms.CorrelationId"
                id="createJMSCorrelationId-Cola" method="createJMSCorrelationId24"/>
            <to id="_toInicioColas" uri="direct:inicio"/>
        </route>
        <route id="cxf-inicio">
            <from id="EndpointListener" uri="cxf:bean:servicioDesafioPortType?DataFormat=MESSAGE"/>
            <to id="_to_inicio-cxf" uri="direct:inicio"/>
        </route>
        <route id="cxf-rest">
            <from id="fromRest" uri="cxfrs:bean:desafioRest"/>
            <choice id="fromOperation">
                <when id="whenSolicitarDesafio">
                    <simple>${header.operationName} == 'solicitarDesafio'</simple>
                    <unmarshal id="unmarshalSolicitarDesafio">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.desafio.wsdl.soap.EntradasSolicitarDesafio"/>
                    </unmarshal>
                    <bean id="solicitarDesafioRequest"
                        method="solicitarDesafioRest" ref="routeFacade"/>
                    <marshal id="marshalSolicitarDesafio">
                        <jaxb contextPath="cl.coopeuch.desafio.wsdl.soap"/>
                    </marshal>
                    <removeHeaders id="solicitarDesafioEliminarHeaders" pattern="*"/>
                    <to id="restSolicitarDesafioToInicio" uri="direct:inicio"/>
                    <unmarshal id="unmarshalSolicitarDesafioResponse">
                        <jaxb contextPath="cl.coopeuch.desafio.wsdl.soap"/>
                    </unmarshal>
                    <bean id="solicitarDesafioResponse"
                        method="solicitarDesafioResponseRest" ref="routeFacade"/>
                    <marshal id="marshalSolicitarDesafio">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.desafio.wsdl.soap.RespuestaSolicitarDesafio"/>
                    </marshal>
                </when>
                <when id="whenValidarDesafio">
                    <simple>${header.operationName} == 'validarDesafio'</simple>
                    <unmarshal id="unmarshalValidarDesafio">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.desafio.wsdl.soap.EntradasValidarDesafio"/>
                    </unmarshal>
                    <bean id="validarDesafioRequest"
                        method="validarDesafioRest" ref="routeFacade"/>
                    <marshal id="marshalValidarDesafio">
                        <jaxb contextPath="cl.coopeuch.desafio.wsdl.soap"/>
                    </marshal>
                    <removeHeaders id="validarDesafioEliminarHeaders" pattern="*"/>
                    <to id="restValidarDesafioToInicio" uri="direct:inicio"/>
                    <unmarshal id="unmarshalValidarDesafioResponse">
                        <jaxb contextPath="cl.coopeuch.desafio.wsdl.soap"/>
                    </unmarshal>
                    <bean id="validarDesafioResponse"
                        method="validarDesafioResposeRest" ref="routeFacade"/>
                    <marshal id="marshalValidarDesafio">
                        <json include="NON_NULL" library="Jackson" unmarshalTypeName="cl.coopeuch.desafio.wsdl.soap.RespuestaValidarDesafio"/>
                    </marshal>
                </when>
            </choice>
        </route>
        <!--     Inicio: Esta ruta es la de entrada del XML y direcciona sugun el metodo seleccionado -->
        <route id="cx-RuteoOperaciones">
            <from id="EndpointListener" uri="direct:inicio"/>
            <doTry id="ruteoOperacionesTry">
                <convertBodyTo id="ruteoOperacionesBodyTo" type="java.lang.String"/>
                <setProperty propertyName="CODIGO">
                	<constant>200</constant>
                </setProperty>
                <bean beanType="cl.coopeuch.util.RespaldarCuerpo"
                    id="backupBody" method="respaldoCuerpo"/>
                <bean beanType="cl.coopeuch.util.jms.CorrelationId"
                    id="createJMSCorrelationId" method="createJMSCorrelationId24"/>
                <setProperty
                    id="ruteoOperacionesHeaderIdentificadorCliente" propertyName="identificadorCliente">
                    <xpath resultType="String">//identificadorCliente</xpath>
                </setProperty>
                <setProperty id="valor-migracion" propertyName="migracion">
                    <simple>{{migracion}}</simple>
                </setProperty>
                <setProperty id="valor-grupo" propertyName="grupo">
                    <simple>{{safesigner.grupo}}</simple>
                </setProperty>
                <setProperty id="valor-grupo-idg" propertyName="grupoIDG">
                    <simple>{{IDG.grupo}}</simple>
                </setProperty>
                <setProperty id="valor-grip-idg" propertyName="gripIDG">
                    <simple>{{IDG.grip}}</simple>
                </setProperty>
                <setProperty id="estado-bloqueo-idg" propertyName="estadoBloqueoIDG">
                    <simple>{{IDG.estado.bloqueo}}</simple>
                </setProperty>
                <choice id="ruteoOperaciones">
                    <when id="rutasolicitarDesafio">
                        <simple>${body} contains 'solicitarDesafio'</simple>
                        <to id="solicitarDesafioValidator" uri="validator:etc/xsd/soapDesafio.xsd"/>
                        <to id="solicitarDesafioTo" uri="direct:solicitarDesafio"/>
                    </when>
                    <when id="rutavalidarDesafio">
                        <simple>${body} contains 'validarDesafio'</simple>
                        <to id="validarDesafioValidator" uri="validator:etc/xsd/soapDesafio.xsd"/>
                        <to id="validarDesafioTo" uri="direct:validarDesafio"/>
                    </when>
                    <otherwise id="_otherwise1"/>
                </choice>
                <doCatch id="ruteoOperacionesCatch">
                    <exception>java.lang.Exception</exception>
                    <exception>java.io.IOException</exception>
                    <bean beanType="cl.coopeuch.util.RespaldarCuerpo"
                        id="ruteoOperacionesRestoreBody" method="restaurarCuerpo"/>
                    <setBody id="ruteoOperacionesSetBodyError">
                        <simple>ERROR:${exception}:${body}</simple>
                    </setBody>
                    <bean
                        beanType="cl.coopeuch.integracion.desafio.util.RouteFacade"
                        id="ruteoOperacionesFiltraErrorXMLSchema" method="errorXMLSchema"/>
                    <when id="_when1">
                        <simple>${headers.tipoError} != 'xmlschema'</simple>
                        <to id="ruteoOperacionesFault" uri="AMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                    </when>
                    <bean
                        beanType="cl.coopeuch.util.error.InsertarError"
                        id="ruteoOperacionesBodyError" method="insertarError"/>
                </doCatch>
            </doTry>
        </route>
        <route id="solicitarDesafio">
            <from id="solicitarDesafioFrom" uri="direct:solicitarDesafio"/>
            <doTry id="solicitarDesafioTry">
                <setProperty id="_setProperty2" propertyName="identificadorCliente">
                    <xpath resultType="String">//identificadorCliente</xpath>
                </setProperty>
                <setProperty id="body_solicitar" propertyName="body_solicitar">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="ope_solicitar" propertyName="operacion">
                    <constant>Solicitar</constant>
                </setProperty>
                <bean id="propiedades-operacion"
                    method="almacenarInformacionOp" ref="routeFacade"/>
                <choice id="EvaluarIdCliente">
                    <when id="IdClienteVacio">
                        <simple>${property.identificadorCliente} == '' || ${property.identificadorCliente} == ' '</simple>
                        <to id="errorIdClienteVacio" uri="xslt://etc/xsl/response/error/error0solicitarDesafio.xsl?saxon=true"/>
                    </when>
                    <otherwise id="IdClienteNoVacio">
                        <choice id="_choice1">
                            <when id="_when2">
                                <simple>${exchangeProperty.migracion} == 1</simple>
                                <to id="validaUsuarioSafesigner-To-Solicitar" uri="direct:validaUsuarioSafesigner"/>
                                <choice id="_choice12">
                                    <when id="_when16">
                                        <simple>${exchangeProperty.Estado_Card} == 0</simple>
                                        <to id="solicitarDesafioIDG-To" uri="direct:solicitarDesafio_Safesigner"/>
                                        <wireTap id="llamada_BD-Solicitar" uri="direct:errorSafesigner"/>
                                    </when>
                                    <when id="_when17">
                                        <simple>${exchangeProperty.Estado_Card} == 2</simple>
                                        <setProperty id="InternalCode-other" propertyName="InternalCode">
                                            <simple>${exchangeProperty.Estado_Card}</simple>
                                        </setProperty>
                                        <to id="probarConexion-other" uri="direct:probarConexion" />
                                        <log id="_log14" message="InternalCode: ${exchangeProperty.InternalCodeOther}" />
                                        <to id="solicitarDesafioSSxml2xmlout" uri="xslt://etc/xsl/response/error/error2solicitarDesafio.xsl?saxon=true"/>
                                        <setProperty id="bodyResponseSS-when-prop" propertyName="bodyResponseSS">
                                            <simple>${body}</simple>
                                        </setProperty>
                                        <setBody id="desbloqueoSetBody-when">
                                            <simple>${exchangeProperty.bodyResponseSS}</simple>
                                        </setBody>
                                        <wireTap id="llamada_BD-other" uri="direct:errorSafesigner"/>
                                    </when>
                                    <otherwise id="_other13">
                                        <wireTap id="llamada_BD" uri="direct:errorSafesigner"/>
                                        <to id="solicitarDesafioIDG-To" uri="direct:solicitarDesafio_IDG"/>
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise id="_otherwise3">
                                <to id="validaUsuarioSafesigner-To-Solicitar-other" uri="direct:validaUsuarioSafesigner"/>
                                <choice id="_choice15">
                                    <when id="_when18">
                                        <simple>${exchangeProperty.Estado_Card} == 0</simple>
                                        <to id="solicitarDesafioIDG-Directo-Safesigner-To" uri="direct:solicitarDesafio_Safesigner"/>
                                        <wireTap id="llamada_BD-Migracion-Solicitar" uri="direct:errorSafesigner"/>
                                    </when>
                                    <otherwise id="_other1">
                                        <removeHeaders id="solitirarDesafio-IDG-removeHeaders-_other1" pattern="*"/>
                                        <setBody id="setBody-body_solicitar__other1">
                                            <simple>${property.body_solicitar}</simple>
                                        </setBody>
                                        <setProperty id="InternalCode-other2" propertyName="CODIGO">
                                            <simple>${exchangeProperty.Estado_Card}</simple>
                                        </setProperty>
                                        <to id="olicitarDesafioSSxml2xmlout-othe" uri="xslt://etc/xsl/response/error/errorxsolicitarDesafioSafesigner.xsl?saxon=true"/>
                                        <bean method="transformacionMensajeOut" ref="routeFacade" />
                                    </otherwise>
                                </choice>
                            </otherwise>
                        </choice>
                    </otherwise>
                </choice>
                <setHeader
                    headerName="org.apache.cxf.message.Message.RESPONSE_CODE" id="RESPONSE_CODE-solicitar">
                    <simple resultType="java.lang.Integer">200</simple>
                </setHeader>
                <doCatch id="solicitarDesafioCatch">
                    <exception>java.lang.Exception</exception>
                    <exception>java.io.IOException</exception>
                    <bean beanType="cl.coopeuch.util.RespaldarCuerpo"
                        id="solicitarDesafioRestoreBody" method="restaurarCuerpo"/>
                    <setBody id="solicitarDesafioSetBodyError1">
                        <simple>ERROR:${exception}:${body}</simple>
                    </setBody>
                    <to id="solicitarDesafioFault" uri="AMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                    <bean
                        beanType="cl.coopeuch.util.error.InsertarError"
                        id="solicitarDesafioSetBodyError" method="insertarError"/>
                </doCatch>
            </doTry>
        </route>
        <!--         Metodo encargado de realizar la validacion de los parametros entregados por el metodo solicitarDesafio -->
        <route id="validarDesafio">
            <from id="validarDesafioFrom" uri="direct:validarDesafio"/>
            <doTry id="validarDesafioTry">
                <setProperty
                    id="validarDesafioHeaderIdentificadorCliente" propertyName="identificadorCliente">
                    <xpath resultType="String">//identificadorCliente</xpath>
                </setProperty>
                <setProperty id="validarDesafioHeaderValorDesafio1" propertyName="valorDesafio1">
                    <xpath resultType="String">//valorDesafio1</xpath>
                </setProperty>
                <setProperty id="validarDesafioHeaderValorDesafio2" propertyName="valorDesafio2">
                    <xpath resultType="String">//valorDesafio2</xpath>
                </setProperty>
                <setProperty id="validarDesafioHeaderValorDesafio3" propertyName="valorDesafio3">
                    <xpath resultType="String">//valorDesafio3</xpath>
                </setProperty>
                <setProperty id="body_validar" propertyName="body_validar">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="ope_validar" propertyName="operacion">
                    <constant>Validar</constant>
                </setProperty>
                <bean id="propiedades-operacion-validar"
                    method="almacenarInformacionOp" ref="routeFacade"/>
                <choice id="EvaluarIdCliente-validar">
                    <when id="IdClienteVacio-validar">
                        <simple>${property.identificadorCliente} == '' || ${property.identificadorCliente} == ' ' || ${property.valorDesafio1} == '' || ${property.valorDesafio1} == ' ' || ${property.valorDesafio2} == '' || ${property.valorDesafio2} == ' ' || ${property.valorDesafio3} == '' || ${property.valorDesafio3} == ' '</simple>
                        <to id="errorDesafioVacio" uri="xslt://etc/xsl/response/error/error0validarDesafio.xsl?saxon=true"/>
                    </when>
                    <otherwise id="validarDesafioNoVacio">
                        <choice id="_choice3">
                            <when id="_when4">
                                <simple>${exchangeProperty.migracion} == 1</simple>
                                <to id="validaUsuarioSafesigner-To" uri="direct:validaUsuarioSafesigner"/>
                                <choice id="_choice13">
                                    <when id="_when5">
                                        <simple>${exchangeProperty.Estado_Card} == 0</simple>
                                        <to id="validarDesafioIDG-To" uri="direct:validarDesafio_Safesigner"/>
                                        <wireTap
                                                id="llamada_BD-SinMigracion-Validar-Safesigner" uri="direct:errorSafesigner"/>
                                    </when>
                                    <when id="_when14">
                                        <simple>${exchangeProperty.Estado_Card} == 2</simple>
                                        <setProperty id="InternalCodeValida-other" propertyName="CODIGO">
                                            <simple>${exchangeProperty.Estado_Card}</simple>
                                        </setProperty>
                                        <to id="probarConexionValida-other" uri="direct:probarConexion" />
                                        <to id="validarDesafioSSxml2xmlout" uri="xslt://etc/xsl/response/error/errorValidarDesafioSafesigner.xsl?saxon=true"/>
                                        <setProperty id="bodyResponseSS-when-prop-valida" propertyName="bodyResponseSS">
                                            <simple>${body}</simple>
                                        </setProperty>
                                        <setBody id="validaSetBody-when">
                                            <simple>${exchangeProperty.bodyResponseSS}</simple>
                                        </setBody>
                                        <wireTap id="llamada_BD-SinMigracion-Validar-IDG-other" uri="direct:errorSafesigner"/>
                                    </when>
                                    <otherwise id="_otherwise4">
                                        <wireTap id="llamada_BD-SinMigracion-Validar-IDG" uri="direct:errorSafesigner"/>
                                        <to id="validarDesafioIDG-To" uri="direct:validarDesafio_IDG"/>
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise id="_otherwise5">
                                <to id="validaUsuarioSafesigner-To-other" uri="direct:validaUsuarioSafesigner"/>
                                <choice id="_choice16">
                                    <when id="_when19">
                                        <simple>${exchangeProperty.Estado_Card} == 0</simple>
                                        <to id="validarDesafioIDG-Directo-Safesigner-To" uri="direct:validarDesafio_Safesigner"/>
                                        <wireTap id="llamada_BD-Migracion-Validar-Safesigner" uri="direct:errorSafesigner"/>
                                    </when>
                                    <otherwise>
                                        <setProperty id="InternalCodeValida-other2" propertyName="CODIGO">
                                            <simple>${exchangeProperty.Estado_Card}</simple>
                                        </setProperty>
                                        <removeHeaders id="validarDesafio-IDG-removeHeaders-_other1" pattern="*"/>
                                        <setBody id="setBody-body_validar__other1">
                                            <simple>${property.body_validar}</simple>
                                        </setBody>
                                        <to id="toXmlSalida-ErrorSafesigner-validarDesafio-other" uri="xslt://etc/xsl/response/error/errorValidarDesafioSafesigner.xsl?saxon=true"/>
                                        <bean method="transformacionMensajeOut" ref="routeFacade" />
                                    </otherwise>
                                </choice>
                            </otherwise>
                        </choice>
                    </otherwise>
                </choice>
                <setHeader
                    headerName="org.apache.cxf.message.Message.RESPONSE_CODE" id="RESPONSE_CODE-Validar">
                    <simple resultType="java.lang.Integer">200</simple>
                </setHeader>
                <log message="FUERA!!!"/>
                <doCatch id="validarDesafioCatch">
                    <exception>java.lang.Exception</exception>
                    <exception>java.io.IOException</exception>
                    <bean beanType="cl.coopeuch.util.RespaldarCuerpo"
                        id="validarDesafioRestoreBody" method="restaurarCuerpo"/>
                    <setBody id="validarDesafioSetBodyError12">
                        <simple>ERROR:${exception}:${body}</simple>
                    </setBody>
                    <to id="validarDesafioFault" uri="AMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                    <bean
                        beanType="cl.coopeuch.util.error.InsertarError"
                        id="validarDesafioSetBodyError" method="insertarError"/>
                </doCatch>
            </doTry>
        </route>
        <!-- LLama a Servicio Mantenedor Datos Fraude/Consultar Datos Fraude CCA -->
        <route id="remoteCall_consultarDatosFraudeCCA">
            <from id="remoteCall_consultarDatosFraudeCCAFrom" uri="direct:remoteCall_consultarDatosFraudeCCA"/>
            <doTry id="remoteCall_consultarDatosFraudeCCATry">
                <to id="remoteCall_consultarDatosFraudeCCAXls" uri="xslt://etc/xsl/request/mid/remoteCall_consultarDatosFraudeCCA.xsl?saxon=true"/>
                <removeHeaders
                    id="remoteCall_consultarDatosFraudeCCARemoveHeaders" pattern="JMS*"/>
                <to
                    id="remoteCall_consultarDatosFraudeCCAToServicioDatosFraudeCCA" uri="cxf:{{desafio.endpoint.serviciodatosfraudecca.url}}?dataFormat=MESSAGE"/>
                <doCatch id="remoteCall_consultarDatosFraudeCCACatch">
                    <exception>java.lang.Exception</exception>
                    <to id="remoteCall_consultarDatosFraudeCCAFault" uri="AMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                </doCatch>
            </doTry>
        </route>
        <!-- LLama a Servicio Fraude/ReportesChallengeCCA -->
        <route id="remoteCall_ReportesChallengeCCA">
            <from id="remoteCall_ReportesChallengeCCAFrom" uri="direct:remoteCall_ReportesChallengeCCA"/>
            <doTry id="remoteCall_ReportesChallengeCCATry">
                <to id="remoteCall_ReportesChallengeCCAXls" uri="xslt://etc/xsl/request/mid/remoteCall_ReportesChallengeCCA.xsl?saxon=true"/>
                <removeHeaders
                    id="remoteCall_ReportesChallengeCCARemoveHeaders" pattern="JMS*"/>
                <to id="remoteCall_ReportesChallengeCCAToServicioFraude" uri="cxf:{{desafio.endpoint.serviciofraude.url}}?dataFormat=MESSAGE"/>
                <doCatch id="remoteCall_ReportesChallengeCCACatch">
                    <exception>java.lang.Exception</exception>
                    <exception>java.io.IOException</exception>
                    <bean beanType="cl.coopeuch.util.RespaldarCuerpo"
                        id="simuladorCreditoRestoreBody" method="restaurarCuerpo"/>
                    <setBody id="simuladorCreditoSetBodyError">
                        <simple>ERROR:${exception}:${body}</simple>
                    </setBody>
                    <to id="simuladorCreditoFault" uri="AMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                    <bean
                        beanType="cl.coopeuch.util.error.InsertarError"
                        id="simuladorCreditoSetBodyError" method="insertarError"/>
                </doCatch>
            </doTry>
        </route>
        <route id="solicitarDesafio_IDG">
            <from id="solicitarDesafioIDG_from" uri="direct:solicitarDesafio_IDG"/>
            <removeHeaders id="solicitarDesafio-IDG-removeHeaders" pattern="*"/>
            <setBody id="setBody-body_solicitar">
                <simple>${property.body_solicitar}</simple>
            </setBody>
            <setProperty id="_setProperty12" propertyName="operacion">
                <constant>solicitarDesafio</constant>
            </setProperty>
            <setHeader headerName="SOAPAction" id="_setHeader442">
                <constant>solicitarDesafio</constant>
            </setHeader>
            <setProperty id="solicitarUsuario-framework_IDG" propertyName="framework">
                <constant>IDG</constant>
            </setProperty>
            <to id="solicitarDesafioProbarConexionXml2xml" uri="xslt://etc/xsl/request/IDG/xml2xmlin_solicitarDesafioProbarConexion.xsl"/>
            <to id="cxfsolicitarDesafioProbarConexion" uri="cxf:{{desafio.endpoint.IDG.url}}?dataFormat=MESSAGE"/>
            <convertBodyTo id="solicitarDesafioBodyTo" type="java.lang.String"/>
            <setHeader headerName="SOAPAction" id="_setHeader1">
                <constant>validarDesafio</constant>
            </setHeader>
            <choice id="solicitarDesafioInternalCode">
                <when id="solicitarDesafioInternalCodeOk">
                    <xpath resultType="String">//challengeRequestResult != '' or //InternalCode='' or //InternalCode='5203040' or //InternalCode='5203016' or //InternalCode='5203004' or //InternalCode='5203002'</xpath>
                    <to id="solicitarDesafioXml2xml" uri="xslt://etc/xsl/request/IDG/xml2xmlin_solicitarDesafio.xsl"/>
                    <to id="cxfsolicitarDesafio" uri="cxf:{{desafio.endpoint.IDG.url}}?dataFormat=MESSAGE"/>
                    <convertBodyTo id="solicitarDesafioResultadoBodyTo" type="java.lang.String"/>
                    <setHeader headerName="SOAPAction" id="_setHeader2">
                        <constant>validarDesafio</constant>
                    </setHeader>
                    <choice id="solicitarDesafioResultado">
                        <when id="resultadoVacio">
                            <xpath resultType="String">//Row !=''</xpath>
                            <to id="solicitarDesafioxml2xmlout" uri="xslt://etc/xsl/response/IDG/xml2xmlout_solicitarDesafio.xsl?saxon=true"/>
                        </when>
                        <otherwise id="resultadoNoVacio">
                            <setProperty
                                id="soliciarDesafioHeaderInternalCode" propertyName="InternalCode">
                                <xpath resultType="String">//InternalCode</xpath>
                            </setProperty>
                            <to id="error2solicitarDesafio" uri="xslt://etc/xsl/response/error/error2solicitarDesafio.xsl?saxon=true"/>
                        </otherwise>
                    </choice>
                </when>
                <otherwise id="solicitarDesafioInternalCodeError">
                    <to id="errorsolicitarDesafio2" uri="xslt://etc/xsl/response/error/error1solicitarDesafio.xsl?saxon=true"/>
                </otherwise>
            </choice>
        </route>
        <route id="validaUsuarioSafesigner_Safesigner">
            <from id="validaUsuarioSafesigner_Safesigner-from" uri="direct:validaUsuarioSafesigner"/>
            <doTry id="_doTry1">
                <setProperty id="validarUsuario-framework_IDG" propertyName="framework">
                    <constant>SS</constant>
                </setProperty>
                <bean id="autenticar-datosEntrada"
                    method="validarUsuarioRequest" ref="routeFacade"/>
                <to id="to-AuthenticationStatus" uri="cxf:bean:endpointCardSafesigner?continuationTimeout=5000&amp;password={{safesigner.cert.password}}&amp;username={{safesigner.cert.usuario}}"/>
                <bean id="autenticar-obtenerStatus"
                    method="obtenerStatus" ref="routeFacade"/>
                <doCatch id="DoCatch-vvalidaUsuarioSafesigner">
                    <exception>java.lang.Exception</exception>
                    <setBody id="SS-SetBodyError">
                        <simple>ERROR:${exception}:${body}</simple>
                    </setBody>
                    <setProperty
                        id="codigo-Error-validaUsuarioSafesigner" propertyName="CODIGO">
                        <constant>503</constant>
                    </setProperty>
                    <to id="Faul-validaUsuarioSafesigner" uri="AMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                    <choice id="_choice5">
                        <when id="_when6">
                            <simple>${property.migracion} == 1</simple>
                            <choice id="_choice6">
                                <when id="_when7">
                                    <simple>${property.operacion} == 'solicitarDesafio'</simple>
                                    <setProperty
                                    id="operacion-Error-solicitarSS" propertyName="OPERACION">
                                    <constant>SOLICITAR</constant>
                                    </setProperty>
                                    <wireTap
                                    id="llamada_BD-validaUsuarioSafesigner" uri="direct:errorSafesigner"/>
                                    <to
                                    id="probarConexion-IDG-To-validaUsuarioSafesigner" uri="direct:probarConexion"/>
                                    <to
                                    id="solicitarDesafioIDG-To-validaUsuarioSafesigner" uri="direct:solicitarDesafio_IDG"/>
                                </when>
                                <otherwise id="_otherwise6">
                                    <setProperty
                                    id="operacion-Error-validarSS" propertyName="OPERACION">
                                    <constant>VALIDAR</constant>
                                    </setProperty>
                                    <wireTap
                                    id="llamada_BD-validaUsuarioSafesigner" uri="direct:errorSafesigner"/>
                                    <to
                                    id="probarConexion-IDG-To-validaUsuarioSafesigner" uri="direct:probarConexion"/>
                                    <to
                                    id="solicitarDesafioIDG-To-validaUsuarioSafesigner" uri="direct:validarDesafio_IDG"/>
                                </otherwise>
                            </choice>
                        </when>
                    </choice>
                </doCatch>
            </doTry>
        </route>
        <route id="solicitarDesafio_Safesigner">
            <from id="solicitarDesafio_Safesigner-from" uri="direct:solicitarDesafio_Safesigner"/>
            <doTry id="_doTry2">
                <setProperty id="solicitarDesafio-framework_SS" propertyName="framework">
                    <constant>SS</constant>
                </setProperty>
                <bean id="solicitarDesafio_Safesigner-datosEntrada"
                    method="validarCardChallengeRequest" ref="routeFacade"/>
                <to id="to-solicitarDesafio_Safesigner" uri="cxf:bean:endpointCardSafesigner?continuationTimeout=5000&amp;password={{safesigner.cert.password}}&amp;username={{safesigner.cert.usuario}}"/>
                <bean id="autenticar-obtenerCoordenadas"
                    method="obtenerCoordenadas" ref="routeFacade"/>
                <choice id="_choice7">
                    <when id="_when8">
                        <simple>${exchangeProperty.CODIGO} &lt; 200</simple>
                        <to id="toXmlSalida-ErrorSafesigner-solicitarDesafio" uri="xslt://etc/xsl/response/error/errorxsolicitarDesafioSafesigner.xsl?saxon=true"/>
                        <bean method="transformacionMensajeOut" ref="routeFacade" />
                    </when>
                    <otherwise id="_otherwise7">
                        <to id="toXmlSalida-ExitosaSafesigner-solicitarDesafio" uri="xslt://etc/xsl/response/Safesigner/xml2xmlout_solicitarDesafio_safesigner.xsl?saxon=true"/>
                        <bean method="transformacionMensajeOut" ref="routeFacade" />
                    </otherwise>
                </choice>
                <doCatch id="DoCatch-Safesigner">
                    <exception>java.lang.Exception</exception>
                    <exception>java.io.IOException</exception>
                    <setBody id="Safesigner-SetBodyError">
                        <simple>ERROR:${exception}:${body}</simple>
                    </setBody>
                    <setProperty id="codigo-Error" propertyName="CODIGO">
                        <constant>503</constant>
                    </setProperty>
                    <setProperty id="operacion-Error" propertyName="OPERACION">
                        <constant>SOLICITAR</constant>
                    </setProperty>
                    <setProperty id="validaUsuario-framework_SS" propertyName="framework">
                        <constant>SS</constant>
                    </setProperty>
                    <to id="Safesigner-Fault" uri="AMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                    <choice id="_choice8">
                        <when id="_when9">
                            <simple>${exchangeProperty.migracion} == 0</simple>
                            <removeHeaders
                                id="solitirarDesafio-IDG-removeHeaders-Error" pattern="*"/>
                            <setBody id="setBody-body_solicitar_prueba">
                                <simple>${property.body_solicitar}</simple>
                            </setBody>
                            <to id="toXmlSalida-ServidorSafesigner-solicitarFault" uri="xslt://etc/xsl/response/error/errorErrorServidor.xsl?saxon=true"/>
                            <bean method="transformacionMensajeOut" ref="routeFacade" />
                            <stop id="_stop4"/>
                        </when>
                        <otherwise id="_otherwise8">
                            <wireTap id="llamada_BD-ERROR" uri="direct:errorSafesigner"/>
                            <to id="solicitarDesafioIDG-To-ERROR" uri="direct:solicitarDesafio_IDG"/>
                        </otherwise>
                    </choice>
                </doCatch>
            </doTry>
        </route>
        <route id="insMigracionLog">
            <from id="insMigracionLog-from" uri="direct:insMigracionLog"/>
            <to id="insMigracionLog-To" uri="sql-stored:classpath:etc/sql/pa_insMigracionSSLog.sql?dataSource=dataSourceSqlServer&amp;outputHeader=responseMigracion"/>
        </route>
        <route id="probarConexionIDG">
            <from id="probarConexionIDG-from" uri="direct:probarConexion"/>
            <removeHeaders id="removeIdg_ProbarConexion" pattern="*"/>
            <setBody id="body_entrada">
                <simple>${property.theoriginalbody}</simple>
            </setBody>
            <setHeader headerName="SOAPAction" id="_setHeader_ProbarConexion">
                <constant>{{header.idg}}</constant>
            </setHeader>
            <to id="probarConexionIDG-Xml2xml" uri="xslt://etc/xsl/request/IDG/xml2xmlin_solicitarDesafioProbarConexion.xsl"/>
            <to id="cxf-probarConexionIDG" uri="cxf:{{desafio.endpoint.IDG.url}}?dataFormat=MESSAGE"/>
        </route>
        <route id="errorSafesigner">
            <from id="errorSafesigner-from" uri="direct:errorSafesigner"/>
            <to id="errorSafesigner-To" uri="direct:insMigracionLog"/>
        </route>
        <route id="validarDesafio_Safesigner">
            <from id="validarDesafio_Safesigner-from" uri="direct:validarDesafio_Safesigner"/>
            <doTry id="_doTry3">
                <bean id="validarDesafio_Safesigner-datosEntrada"
                    method="validarCardResponseRequest" ref="routeFacade"/>
                <to id="to-validarDesafio_Safesigner" uri="cxf:bean:endpointCardSafesigner?continuationTimeout=5000&amp;password={{safesigner.cert.password}}&amp;username={{safesigner.cert.usuario}}"/>
                <bean id="autenticar-validarCoordenadas"
                    method="validarCoordenadas" ref="routeFacade"/>
                <setProperty id="validaDesafio-framework_SS" propertyName="framework">
                    <constant>SS</constant>
                </setProperty>
                <choice id="_choice9">
                    <when id="_when10">
                        <simple>${exchangeProperty.CODIGO} &lt; 200 </simple>
                        <to id="toXmlSalida-ErrorSafesigner-validarDesafio" uri="xslt://etc/xsl/response/error/errorValidarDesafioSafesigner.xsl?saxon=true"/>
                        <setProperty id="InternalCode-Safesigner" propertyName="InternalCode">
                            <simple>${exchangeProperty.CODIGO}</simple>
                        </setProperty>
                        <setProperty
                                id="Body_validar_respuesta-Safesigner" propertyName="body_validar_respuesta">
                            <simple>${body}</simple>
                        </setProperty>
                        <to id="remoteCall_consultarDatosFraudeCCATo-Safesigner" uri="direct:remoteCall_consultarDatosFraudeCCA"/>
                        <convertBodyTo
                            id="validarDesafioNoVacioBodyTo-Safesigner" type="java.lang.String"/>
                        <setProperty
                            id="validarDesafioNoVacioHeaderIdTransaccionCCA-Safesigner" propertyName="idTransaccionCCA">
                            <xpath resultType="String">//idTransaccionCCA</xpath>
                        </setProperty>
                        <choice id="consultarDatosFraudeCCAResultado-Safesigner">
                            <when id="consultarDatosFraudeCCAOk-Safesigner">
                                <xpath>//estado='C' and //factorSeguridad='2' and //FechaTransaccion &lt;= 5</xpath>
                                <to id="remoteCall_ReportesChallengeCCAto-Safesigner" uri="direct:remoteCall_ReportesChallengeCCA"/>
                            </when>
                            <otherwise id="consultarDatosFraudeCCAError-Safesigner">
                                <to id="errorvalidarDesafio-Safesigner" uri="xslt://etc/xsl/response/error/error2validarDesafio.xsl?saxon=true"/>
                            </otherwise>
                        </choice>
                        <setBody id="setBody-body_validar_respuesta">
                            <simple>${property.body_validar_respuesta}</simple>
                        </setBody>

                    </when>
                    <otherwise id="_otherwise9">
                        <to id="toXmlSalida-ExitosaSafesigner-validarDesafio" uri="xslt://etc/xsl/response/Safesigner/xml2xmlout_validarDesafio.xsl?saxon=true"/>
                        <bean method="transformacionMensajeOut" ref="routeFacade" />
                    </otherwise>
                </choice>
                <doCatch id="DoCatch-Safesigner-validar">
                    <exception>java.lang.Exception</exception>
                    <exception>java.io.IOException</exception>
                    <setBody id="Safesigner-SetBodyError-validar">
                        <simple>ERROR:${exception}:${body}</simple>
                    </setBody>
                    <setProperty id="codigo-Error-validar" propertyName="CODIGO">
                        <constant>503</constant>
                    </setProperty>
                    <setProperty id="operacion-Error-validar" propertyName="OPERACION">
                        <constant>VALIDAR</constant>
                    </setProperty>
                    <setProperty id="validaDesafio-framework_SS-DoCatch" propertyName="framework">
                        <constant>SS</constant>
                    </setProperty>
                    <to id="Safesigner-Fault-validar" uri="AMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                    <choice id="_choice10">
                        <when id="_when11">
                            <simple>${exchangeProperty.migracion} == 0</simple>
                            <removeHeaders
                                id="solitirarDesafio-IDG-removeHeaders-Error-validar" pattern="*"/>
                            <setBody id="setBody-body_solicitar-validar">
                                <simple>${property.body_validar}</simple>
                            </setBody>
                            <to id="toXmlSalida-ServidorSafesigner-validar" uri="xslt://etc/xsl/response/error/errorErrorServidor.xsl?saxon=true"/>
                            <bean method="transformacionMensajeOut" ref="routeFacade" />
                            <stop id="_stop6"/>
                        </when>
                        <otherwise id="_otherwise10">
                            <wireTap id="llamada_BD-ERROR-validar" uri="direct:errorSafesigner"/>
                            <to id="validarDesafioIDG-To-Error" uri="direct:validarDesafio_IDG"/>
                        </otherwise>
                    </choice>
                </doCatch>
            </doTry>
        </route>
        <route id="consultaBloqueoDesafioIDG">
            <from id="consultaBloqueoDesafioIDGFrom" uri="direct:consultaBloqueoIDG" />
            <doTry id="_doTry4">
                <choice id="_choice11">
                    <when id="_when12">
                        <simple>${property.migracion} == 1 and ${exchangeProperty.InternalCode} == 51</simple>
                        <setProperty id="_setProperty4" propertyName="coordenadaIDG">
                            <constant>{{IDG.card}}</constant>
                        </setProperty>
                        <setProperty id="_setProperty5" propertyName="typeIDG">
                            <constant>{{IDG.type}}</constant>
                        </setProperty>
                        <setProperty id="_setProperty6" propertyName="sizeIDG">
                            <constant>{{IDG.challenge.size}}</constant>
                        </setProperty>
                        <to id="probarConexion-validaDesafioIDG" uri="direct:probarConexion"/>
                        <bean id="iniValidaDesafio" ref="routeFacade" method="iniValidaDesafio" />
                        <to id="bloqueoDesafioIDG-to" uri="direct:bloqueoDesafioIDG" />
                    </when>
                </choice>
            </doTry>
        </route>
        <route id="bloqueoDesafioIDG">
            <from id="bloqueoDesafioIDG-from" uri="direct:bloqueoDesafioIDG" />
            <when>
                <simple>${exchangeProperty.validarContador} == '0'</simple>
                <stop/>
            </when>
            <otherwise>
                <to id="BloquearDesafio-Xml2xml" uri="xslt://etc/xsl/request/IDG/xml2xmlin_bloqueoDesafio.xsl"/>
                <to id="cxfbloqueoDesafioIDG" uri="cxf:{{desafio.endpoint.IDG.url}}?dataFormat=MESSAGE&amp;loggingFeatureEnabled=true"/>
                <convertBodyTo id="SetBody-To-respuesat" type="java.lang.String"/>
                <log id="_logDesafio" message="bodyDesafio: ${body}" />
                <bean id="IncrementarLoop-datosEntrada" method="incrementarLoop" ref="routeFacade"/>
                <to id="To-bloqueoDesafioIDG" uri="direct:bloqueoDesafioIDG"/>
            </otherwise>
        </route>
        <route id="validarDesafio_IDG">
            <from id="validarDesafio_IDG_from" uri="direct:validarDesafio_IDG"/>
            <removeHeaders id="validarDesafio-IDG-removeHeaders" pattern="*"/>
            <setProperty id="validarDesafio-framework_IDG" propertyName="framework">
                <constant>IDG</constant>
            </setProperty>
            <setBody id="setBody-body_validar">
                <simple>${property.body_validar}</simple>
            </setBody>
            <setProperty id="_setProperty3" propertyName="operacion">
                <constant>validarDesafio</constant>
            </setProperty>
            <setHeader headerName="SOAPAction" id="_setHeader45">
                <constant>validarDesafio</constant>
            </setHeader>
            <to id="validarDesafioProbarConexionXml2xml" uri="xslt://etc/xsl/request/IDG/xml2xmlin_validarDesafioProbarConexion.xsl"/>
            <to id="cxfvalidarDesafioProbarConexion" uri="cxf:{{desafio.endpoint.IDG.url}}?dataFormat=MESSAGE"/>
            <convertBodyTo id="validarDesafioBodyTo" type="java.lang.String"/>
            <setHeader headerName="SOAPAction" id="_setHeader3">
                <constant>validarDesafio</constant>
            </setHeader>
            <choice id="validarDesafioInternalCode">
                <when id="validarDesafioInternalCodeOk">
                    <xpath resultType="String">//challengeRequestResult != '' or //InternalCode='' or //InternalCode='5203040' or //InternalCode='5203016' or //InternalCode='5203004' or //InternalCode='5203002'</xpath>
                    <to id="validarDesafioXml2xml" uri="xslt://etc/xsl/request/IDG/xml2xmlin_validarDesafio.xsl"/>
                    <log message="validarDesafio: ${body}" />
                    <to id="cxfvalidarDesafio" uri="cxf:{{desafio.endpoint.IDG.url}}?dataFormat=MESSAGE"/>
                    <convertBodyTo
                        id="validarDesafioInternalCodeOkBodyTo" type="java.lang.String"/>
                    <setHeader headerName="SOAPAction" id="_setHeader5">
                        <constant>validarDesafio</constant>
                    </setHeader>
                    <choice id="validarDesafioOk">
                        <when id="validarDesafioVacio">
                            <xpath resultType="String">//SerialNumber != ''</xpath>
                            <removeHeaders id="_removeHeaders3" pattern="JMS*"/>
                            <to id="validarDesafioxml2xmlout" uri="xslt://etc/xsl/response/Safesigner/xml2xmlout_validarDesafio.xsl?saxon=true"/>
                        </when>
                        <otherwise id="validarDesafioError">
                            <setProperty
                                id="validarDesafioNoVacioHeaderInternalCode" propertyName="InternalCode">
                                <xpath resultType="String">//InternalCode</xpath>
                            </setProperty>
                            <to
                                id="remoteCall_consultarDatosFraudeCCATo" uri="direct:remoteCall_consultarDatosFraudeCCA"/>
                            <convertBodyTo
                                id="validarDesafioNoVacioBodyTo" type="java.lang.String"/>
                            <setProperty
                                id="validarDesafioNoVacioHeaderIdTransaccionCCA" propertyName="idTransaccionCCA">
                                <xpath resultType="String">//idTransaccionCCA</xpath>
                            </setProperty>
                            <choice id="consultarDatosFraudeCCAResultado">
                                <when id="consultarDatosFraudeCCAOk">
                                    <xpath>//estado='C' and //factorSeguridad='2' and //FechaTransaccion &lt;= 5</xpath>
                                    <to
                                    id="remoteCall_ReportesChallengeCCAto" uri="direct:remoteCall_ReportesChallengeCCA"/>
                                </when>
                                <otherwise id="consultarDatosFraudeCCAError">
                                    <to id="errorvalidarDesafio" uri="xslt://etc/xsl/response/error/error2validarDesafio.xsl?saxon=true"/>
                                </otherwise>
                            </choice>
                        </otherwise>
                    </choice>
                </when>
                <otherwise id="validarDesafioInternalCodeError">
                    <to id="errorvalidarDesafio2" uri="xslt://etc/xsl/response/error/error1validarDesafio.xsl?saxon=true"/>
                </otherwise>
            </choice>
            <setHeader
                headerName="org.apache.cxf.message.Message.RESPONSE_CODE" id="_setHeader38">
                <simple resultType="java.lang.Integer">200</simple>
            </setHeader>
        </route>
    </camelContext>
</blueprint>
