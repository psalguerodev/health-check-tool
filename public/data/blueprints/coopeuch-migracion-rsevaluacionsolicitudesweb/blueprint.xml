<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyLocal" persistent-id="wsevaluacionsolicitudesweb"
        placeholder-prefix="[{" placeholder-suffix="}]" update-strategy="reload"/>
    <cm:property-placeholder id="propertyGlobalDb2"
        persistent-id="globalDb2" placeholder-prefix="[["
        placeholder-suffix="]]" update-strategy="reload"/>
        
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property 	 name="usePooledConnection" value="true"/>
    </bean>
    <bean class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close" id="dataSource">
        <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver"/>
        <property name="url" value="[{jdbc.sqlserver.url.wsevaluacionsolicitudesweb}];charset=iso_1"/>
        <property name="username" value="[{jdbc.sqlserver.username.wsevaluacionsolicitudesweb}]"/>
        <property name="password" value="[{jdbc.sqlserver.password.wsevaluacionsolicitudesweb}]"/>
        <property name="timeBetweenEvictionRunsMillis" value="[{jdbc.sqlserver.timeBetweenEvictionRunsMillis.wsevaluacionsolicitudesweb}]"/>
        <property name="numTestsPerEvictionRun" value="[{jdbc.sqlserver.numTestsPerEvictionRun.wsevaluacionsolicitudesweb}]"/>
        <property name="minEvictableIdleTimeMillis" value="[{jdbc.sqlserver.minEvictableIdleTimeMillis.wsevaluacionsolicitudesweb}]"/>
        <property name="maxActive" value="[{jdbc.sqlserver.maxActive.wsevaluacionsolicitudesweb}]"/>
    </bean>
    
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSourceDB2">
        <property name="driverClassName" value="com.ibm.as400.access.AS400JDBCDriver"/>
        <property name="url" value="[[jdbc.db2.url.servicio]]"/>
        <property name="username" value="[[jdbc.db2.username.creditos]]"/>
        <property name="password" value="[[jdbc.db2.password.creditos]]"/>
        <property name="timeBetweenEvictionRunsMillis" value="[{jdbc.db2.timeBetweenEvictionRunsMillis.creditosconsumo}]"/>
        <property name="numTestsPerEvictionRun" value="[{jdbc.db2.numTestsPerEvictionRun.creditosconsumo}]"/>
        <property name="minEvictableIdleTimeMillis" value="[{jdbc.db2.minEvictableIdleTimeMillis.creditosconsumo}]"/>
        <property name="maxActive" value="[{jdbc.db2.maxActive.creditosconsumo}]"/>
    </bean>
    
    <bean class="cl.coopeuch.integracion.utilidad.evaluacionsolicitudesweb.util.RouteFacade" id="beanRouteFacade"/>
    <camelcxf:cxfEndpoint address="/WSEvaluacionSolicitudesWeb"
        id="endpointWSEvaluacionSolicitudesWeb"
        serviceClass="cl.coopeuch.integracion.utilidad.wsdl.WSEvaluacionSolicitudesWebSOAPPortType" wsdlURL="etc/wsdl/WSEvaluacionSolicitudesWeb.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
	<camelcxf:rsServer address="/RSEvaluacionSolicitudesWeb"
        id="endpointRSEvaluacionSolicitudesWeb" serviceClass="cl.coopeuch.integracion.utilidad.wsdl.WSEvaluacionSolicitudesWebSOAPPortType"/>
    <camelContext id="servicio-evaluacion-solicitudes-web" xmlns="http://camel.apache.org/schema/blueprint">
		<route id="inicio-soap">
            <from id="inicioFromSoap" uri="cxf:bean:endpointWSEvaluacionSolicitudesWeb"/>
            <to id="soapToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="inicio-rest">
            <from id="restInicio" uri="cxfrs:bean:endpointRSEvaluacionSolicitudesWeb"/>
            <to id="restToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="cxf-inicio">
			<from id="inicioFromServicio" uri="direct:cxf-inicio"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <log message="bodyInicio::: ${body}" />
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <log message="property::: ${property.tipoRequest}" />
                <setBody id="inicioSetBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <log message="bodyGet(0)::: ${body}" />
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionConsultar">
                        <simple>${header.operationName} == 'evaluar'</simple>
                        <to id="toConsultar" uri="direct:evaluar"/>
                    </when>
                    <when id="inicioWhenOperacionObtenerCarros">
                        <simple>${header.operationName} == 'obtenerCarros'</simple>
                        <to id="toConsultar" uri="direct:obtenerCarros"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="evaluar">
            <from id="evaluarFrom" uri="direct:evaluar"/>
            <doTry id="evaluarTry">
                <setHeader id="evaluarHeader" headerName="rut">
                    <xpath resultType="String">normalize-space(//rutCliente)</xpath>
                </setHeader>
                <choice>
                    <when>
                        <simple>${header.rut} == ''</simple>
                        <bean id="beanCamposEntrada"
                              method="beanCamposEntrada" ref="beanRouteFacade"/>
                    </when>
                    <otherwise>
                        <to id="PA_SELEvaluacionSolicitudesWeb" uri="sql-stored:classpath:etc/sql/PA_SELEvaluarSolicitudesWeb.sql?outputHeader=selEvaluarSolicitudesWebResponse&amp;dataSource=#dataSource"/>
                        
<!--                         <log message="((((selEvaluarSolicitudesWebResponse: ${headers.selEvaluarSolicitudesWebResponse}))))"/> -->
                        <bean id="beanSetEvaluarSolicitudesWeb"
                              method="beanEvaluarSolicitudesWebSalida" ref="beanRouteFacade"/>
                    </otherwise>
                </choice>
                <removeHeaders id="evaluarHeaders" pattern="*"/>
                <doCatch id="evaluarDoCatchSQL">
                    <exception>java.sql.SQLException</exception>
                    <setProperty id="evaluarErrorSQL" propertyName="codigoError">
                        <simple>509</simple>
                    </setProperty>
                    <to id="toEvaluarExcepcionSQL" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="evaluarDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="evaluarCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="toEvaluarExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        
        <route id="obtenerCarros">
            <from id="obtenerCarrosFrom" uri="direct:obtenerCarros"/>
            <doTry id="obtenerCarrosTry">
                <setProperty id="obtenerCarrosHeader" propertyName="periodo">
                    <xpath resultType="String">normalize-space(//periodo)</xpath>
                </setProperty>
                <choice>
                    <when>
                        <simple>${property.periodo} == ''</simple>
                        <bean id="beanObtenerCarros"
                              method="beanCamposObtenerCarros" ref="beanRouteFacade"/>
                    </when>
                    <otherwise>
                        <to id="PA_SEL_FILTROCARROABANDONADO_WS" uri="sql-stored:classpath:etc/sql/PA_SEL_FILTROCARROABANDONADO_WS.sql?outputHeader=selObtenerCarrosAbandonadosResponse&amp;dataSource=#dataSourceDB2"/>
                       <bean id="beanSetObtenerCarrosAbandonados"
                              method="beanObtenerCarrosAbandonadosSalida" ref="beanRouteFacade"/>
                    </otherwise>
                </choice>
                <log message="RespuestaA(((((${body}))))"/>
                <removeHeaders id="removeHeadersCarroAbandonado" pattern="selObtenerCarrosAbandonadosResponse"/>
                <doCatch id="ObtenerCarrosDoCatchSQL">
                    <exception>java.sql.SQLException</exception>
                    <setProperty id="ObtenerCarrosErrorSQL" propertyName="codigoError">
                        <simple>509</simple>
                    </setProperty>
                    <to id="toObtenerCarrosExcepcionSQL" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="ObtenerCarrosDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="ObtenerCarrosCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="toObtenerCarrosExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion"
                    method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
