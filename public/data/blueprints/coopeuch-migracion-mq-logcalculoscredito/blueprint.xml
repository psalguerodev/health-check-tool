<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="properyMqLogCalculosCredito"
        persistent-id="mqlogcalculoscredito" placeholder-prefix="[{"
        placeholder-suffix="}]" update-strategy="reload"/>
    <!-- Conexion Base de datos -->
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSourceSqlServer">
        <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver"/>
        <property name="url" value="[{jdbc.sqlserver.url.ds.mqlogcalculoscredito}]/[{jdbc.sqlserver.database.ds.mqlogcalculoscredito}];charset=iso_1"/>
        <property name="username" value="[{jdbc.sqlserver.username.ds.mqlogcalculoscredito}]"/>
        <property name="password" value="[{jdbc.sqlserver.password.ds.mqlogcalculoscredito}]"/>
        <property name="timeBetweenEvictionRunsMillis" value="[{jdbc.sqlserver.timeBetweenEvictionRunsMillis.ds.mqlogcalculoscredito}]"/>
        <property name="numTestsPerEvictionRun" value="[{jdbc.sqlserver.numTestsPerEvictionRun.ds.mqlogcalculoscredito}]"/>
        <property name="minEvictableIdleTimeMillis" value="[{jdbc.sqlserver.minEvictableIdleTimeMillis.ds.mqlogcalculoscredito}]"/>
        <property name="maxActive" value="[{jdbc.sqlserver.maxActive.ds.mqlogcalculoscredito}]"/>
    </bean>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean
        class="cl.coopeuch.integracion.mqlogcalculoscredito.util.RouteFacade" id="beanRouteFacade"/>
    <camelcxf:cxfEndpoint address="/MQLogCalculosCredito"
        id="endpointMQLogCalculosCredito"
        serviceClass="cl.coopeuch.integracion.mqlogcalculoscredito.wsdl.MQLogCalculosCreditoSOAPPortType" wsdlURL="etc/wsdl/MQLogCalculosCredito.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
    <camelContext id="servicio-log-calculos-credito" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="cxf-inicio">
            <from id="inicioFromServicio" uri="cxf:bean:endpointMQLogCalculosCredito"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionRegistrarFlujo">
                        <simple>${header.operationName} == 'registrarFlujo'</simple>
                        <to id="toRegistrarFlujo" uri="direct:registrarFlujo"/>
                    </when>
                    <when id="inicioWhenOperacionRegistrarCalculo">
                        <simple>${header.operationName} == 'registrarCalculo'</simple>
                        <to id="toRegistrarCalculo" uri="direct:registrarCalculo"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <to id="toInicioExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="cxf-inicio-amq">
            <from id="recibeAmqRegistroLog" uri="beanAMQ:{{amq.merp.log.req}}"/>
            <doTry id="inicioAmqTry">
                <unmarshal id="inicioAmqMarshal">
                    <jaxb contextPath="cl.coopeuch.integracion.mqlogcalculoscredito.wsdl"/>
                </unmarshal>
                <setProperty id="inicioAmqSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioAmqSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.class.getSimpleName()}</simple>
                </setProperty>
                <choice id="inicioAmqChoiceOperacion">
                    <when id="inicioAmqWhenOperacionRegistrarFlujo">
                        <simple>${exchangeProperty.tipoRequest} == 'RegistrarFlujoRequest'</simple>
                        <to id="toAmqRegistrarFlujo" uri="direct:registrarFlujo"/>
                    </when>
                    <when id="inicioAmqWhenOperacionRegistrarCalculo">
                        <simple>${exchangeProperty.tipoRequest} == 'RegistrarCalculoRequest'</simple>
                        <to id="toAmqRegistrarCalculo" uri="direct:registrarCalculo"/>
                    </when>
                    <otherwise id="inicioAmqOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwAmqExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioAmqDoCatch">
                    <exception>java.lang.Exception</exception>
                    <to id="toInicioAmqExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="registrarFlujo">
            <from id="registrarFlujoFrom" uri="direct:registrarFlujo"/>
            <doTry id="registrarFlujoTry">
                <bean id="registrarFlujoBeanSetHeaders"
                    method="setHeadersRegistrarFlujo" ref="beanRouteFacade"/>
                <to id="spInsDetalleFlujo" uri="sql-stored:classpath:etc/sql/pa_insAUD_DetalleFlujo.sql?outputHeader=spInsDetalleFlujoResponse&amp;dataSource=dataSourceSqlServer"/>
                <bean id="registrarFlujoBeanGeneraRespuesta"
                    method="generaRespuestaFlujo" ref="beanRouteFacade"/>
                <convertBodyTo id="registrarFlujoConvertBodyToResponse" type="cl.coopeuch.integracion.mqlogcalculoscredito.wsdl.RegistrarFlujoResponse"/>
                <doCatch id="registrarFlujoDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="registrarFlujoPropertyCodigo" propertyName="codigoError">
                        <simple>411</simple>
                    </setProperty>
                    <throwException exceptionType="java.lang.Exception"
                        id="throwExceptionRegistrarFlujo" message="{{mqlogcalculoscredito.error.411}}"/>
                    <to id="toRegistrarFlujoExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="registrarCalculo">
            <from id="registrarCalculoFrom" uri="direct:registrarCalculo"/>
            <doTry id="registrarCalculoTry">
                <bean id="registrarCalculoBeanSetHeaders"
                    method="setHeadersRegistrarCalculo" ref="beanRouteFacade"/>
                <to id="spInsCalculo" uri="sql-stored:classpath:etc/sql/pa_insAUD_Calculo.sql?outputHeader=spInsCalculoResponse&amp;dataSource=dataSourceSqlServer"/>
                <bean id="registrarCalculoBeanGeneraRespuesta"
                    method="generaRespuestaCalculo" ref="beanRouteFacade"/>
                <convertBodyTo
                    id="registrarCalculoConvertBodyToResponse" type="cl.coopeuch.integracion.mqlogcalculoscredito.wsdl.RegistrarCalculoResponse"/>
                <doCatch id="registrarCalculoDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="registrarCalculoPropertyCodigo" propertyName="codigoError">
                        <simple>412</simple>
                    </setProperty>
                    <throwException exceptionType="java.lang.Exception"
                        id="throwExceptionRegistrarCalculo" message="{{mqlogcalculoscredito.error.412}}"/>
                    <to id="toRegistrarCalculoExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.merp.log.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion"
                    method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
