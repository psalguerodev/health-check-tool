<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:http="http://cxf.apache.org/transports/http/configuration"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
                             placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyGlobal2" persistent-id="globalDb2"
                                 placeholder-prefix="[{" placeholder-suffix="}]" update-strategy="reload"/>  
    <cm:property-placeholder id="propertyLocal" persistent-id="wspostulacionvivienda"
                             placeholder-prefix="{{" placeholder-suffix="}}" update-strategy="reload"/>
    
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    
    <bean class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close" id="dataSourceSqlDb2">
        <property name="driverClassName" value="com.ibm.as400.access.AS400JDBCDriver"/>
        <property name="url" value="[{jdbc.db2.url.servicio}]"/>
        <property name="username" value="[{jdbc.db2.username.cuentas}]"/>
        <property name="password" value="[{jdbc.db2.password.cuentas}]"/>
        <property name="timeBetweenEvictionRunsMillis" value="{{jdbc.db2.timeBetweenEvictionRunsMillis.cuentas}}"/>
        <property name="numTestsPerEvictionRun" value="{{jdbc.db2.numTestsPerEvictionRun.cuentas}}"/>
        <property name="minEvictableIdleTimeMillis" value="{{jdbc.db2.minEvictableIdleTimeMillis.cuentas}}"/>
        <property name="maxActive" value="{{jdbc.db2.maxActive.cuentas}}"/>
    </bean>
    
    <bean class="cl.coopeuch.integracion.entidad.servicio.postulacionvivienda.util.RouteFacade" id="beanRouteFacade"/>
    
    <camelcxf:cxfEndpoint address="/WSPostulacionVivienda"
                          id="endpointWSPostulacionVivienda"
                          serviceClass="cl.coopeuch.integracion.entidad.servicio.postulacionvivienda.wsdl.WSPostulacionViviendaSOAPPortType" wsdlURL="etc/wsdl/WSPostulacionVivienda.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
    
    <camelcxf:rsServer address="/RSPostulacionVivienda"
                       id="endpointRSPostulacionVivienda"
                       serviceClass="cl.coopeuch.integracion.entidad.servicio.postulacionvivienda.wsdl.WSPostulacionViviendaSOAPPortType"/>
    
    <camelContext id="servicio-postulacion-vivienda" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="inicio-soap">
            <from id="inicioFromSoap" uri="cxf:bean:endpointWSPostulacionVivienda"/>
            <to id="soapToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="inicio-rest">
            <from id="restInicio" uri="cxfrs:bean:endpointRSPostulacionVivienda"/>
            <to id="restToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="cxf-inicio">
            <from id="inicioFromServicio" uri="direct:cxf-inicio"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <setBody id="inicioSetBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionCrear">
                        <simple>${header.operationName} == 'consultarCAHVivienda'</simple>
                        <to id="toCrear" uri="direct:consultarCAHVivienda"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <bean id="obtenerVersionServicioBean" method="obtenerVersionServicio" ref="beanRouteFacade"/>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        <route id="consultarCAHVivienda">
            <from id="consultarCAHVivienda" uri="direct:consultarCAHVivienda"/>
            <doTry id="consultarCAHViviendaTry">
                <setProperty propertyName="userId">
                    <simple>$simple{body.userId}</simple>
                </setProperty>
                <setProperty propertyName="canalLlamada">
                    <simple>$simple{body.canalLlamada}</simple>
                </setProperty>                
                <setProperty propertyName="rut">
                    <simple>${body.rut}</simple>
                </setProperty>
                <bean id="validarRequestConsultarCAHVivienda"  method="validarRequestConsultarCAHVivienda" ref="beanRouteFacade"/>
                <to id="consultarCAHVivienda-To" uri="sql-stored:classpath:etc/sql/PA_SEL_POSTULACIONVIVIENDA_CONSULTARCAHVIVIENDA_WS.sql?dataSource=dataSourceSqlDb2&amp;outputHeader=consultarCAHViviendaPaResponse"/>
                <bean method="generarResponseConsultarCAHVivienda" ref="beanRouteFacade"/>
                <unmarshal id="unmarshalConsultarCAHVivienda">
                    <jaxb contextPath="cl.coopeuch.integracion.entidad.servicio.postulacionvivienda.wsdl"/>
                </unmarshal>
                <doCatch id="validacionesConsultarCAHViviendaDoCatchPa">
                    <exception>java.lang.IllegalArgumentException</exception>
                    <to id="validacionesConsultarCAHViviendaToExcepcion" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="consultarCAHViviendaDBDoCatch">
                    <exception>java.sql.SQLException</exception>
                    <setProperty id="consultarCAHViviendaDBCodigoError" propertyName="codigoError">
                        <constant>505</constant>
                    </setProperty>
                    <log message="Error: ${exception.stacktrace}"/>
                    <to id="consultarCAHViviendaToExcepcion" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="consultarCAHViviendaDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="consultarCAHViviendaCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="consultarCAHViviendaToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <bean id="excepcionBeanExcepcion"
                      method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
    </camelContext>
</blueprint>
