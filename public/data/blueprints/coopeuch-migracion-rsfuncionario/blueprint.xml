<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:http="http://cxf.apache.org/transports/http/configuration"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
                             placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyLocal"
                             persistent-id="wsfuncionario" placeholder-prefix="[{"
                             placeholder-suffix="}]" update-strategy="reload"/>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean class="cl.coopeuch.integracion.wsfuncionario.util.RouteFacade" id="beanRouteFacade"/>
    <bean class="cl.coopeuch.integracion.wsfuncionario.exception.ErrorExcepcionInterceptor" id="ErrorExcepcionInterceptor"/>
    <camelcxf:cxfEndpoint address="/WSFuncionario"
                          id="endpointWSFuncionario"
                          serviceClass="cl.coopeuch.integracion.wsfuncionario.wsdl.WSFuncionarioSOAPPortType"
                          wsdlURL="etc/wsdl/WSFuncionario.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
    <bean class="org.apache.cxf.jaxrs.provider.json.JSONProvider" id="jsonProvider"/>
    <camelcxf:rsServer address="/RSFuncionario"
                       id="endpointRSFuncionario"
                       serviceClass="cl.coopeuch.integracion.wsfuncionario.wsdl.WSFuncionarioSOAPPortType">
        <camelcxf:inInterceptors>
	       <ref component-id="ErrorExcepcionInterceptor"/>
	   	</camelcxf:inInterceptors>
	</camelcxf:rsServer>
    
    <camelContext id="servicio-funcionario" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="inicio-soap">
            <from id="inicioFromSoap" uri="cxf:bean:endpointWSFuncionario"/>
            <to id="soapToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="inicio-rest">
            <from id="restInicio" uri="cxfrs:bean:endpointRSFuncionario"/>
            <to id="restToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="cxf-inicio">
            <from id="inicioFromServicio" uri="direct:cxf-inicio"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <setBody id="inicioSetBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionConsultarRut">
                        <simple>${header.operationName} == 'consultarRut'</simple>
                        <to id="toConsultar" uri="direct:consultarRut"/>
                    </when>
                    <when id="inicioWhenOperacionConsultar">
                        <simple>${header.operationName} == 'consultar'</simple>
                        <to id="toConsultar" uri="direct:consultar"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        <route id="consultarRut">
            <from id="consultarRutFrom" uri="direct:consultarRut"/>
            <doTry id="consultarRutTry">
                <removeHeaders pattern="*"/>
                <setHeader headerName="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <setHeader headerName="Exchange.HTTP_METHOD">
                    <constant>GET</constant>
                </setHeader>
                <bean method="validarRequestConsultarRut" ref="beanRouteFacade"/>
                <log message="Llamada a API BUK con rut: ${property.rut}"/>
                <toD uri="cxfrs:{{wsfuncionario.integracion.api.msbuk.endpoint}}/${property.rut}?loggingFeatureEnabled=true"/>
                <removeHeaders pattern="*"/>
<!--                 <log message="(((((${body})))))"/> -->
                <unmarshal>
                    <json library="Jackson" unmarshalTypeName="cl.coopeuch.integracion.apibuk.ConsultarFuncionarioResponse"/>
                </unmarshal>
                <bean method="generarResponseConsultarRut" ref="beanRouteFacade"/>
                <unmarshal>
                    <jaxb contextPath="cl.coopeuch.integracion.wsfuncionario.wsdl"/>
                </unmarshal>
                <doCatch>
                    <exception>java.lang.IllegalArgumentException</exception>
                    <setProperty propertyName="codigoError">
                        <constant>504</constant>
                    </setProperty>
                    <to uri="direct:excepcion"/>
                </doCatch>
                <doCatch>
                    <exception>java.io.IOException</exception>
                    <setProperty propertyName="codigoError">
                        <constant>504</constant>
                    </setProperty>
                    <to uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="consultarRutDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="consultarRutCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="toConsultarRutExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        
        <route id="consultar" streamCache="true">
            <from id="consultarFrom" uri="direct:consultar"/>
            <doTry id="consultarTry">
            	<bean method="validacionAutenticacion" ref="beanRouteFacade"/>
                <removeHeaders pattern="*"/>
                <setHeader headerName="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <setHeader headerName="Exchange.HTTP_METHOD">
                    <constant>GET</constant>
                </setHeader>
                
                <bean method="validarRequestConsultar" ref="beanRouteFacade"/>
                <setHeader headerName="auth_token">
                    <simple>${property.auth_token}</simple>
                </setHeader>
                <log message="Llamada a API BUK con rut: ${property.rut}"/>
                <toD uri="cxfrs:${property.urlConsultar}?loggingFeatureEnabled=true&amp;throwExceptionOnFailure=false"/>
                <log message="Status Respuesta API BUK: ${header.CamelHttpResponseCode}"/>
                <choice>
                	<when>
                		<simple>${header.CamelHttpResponseCode} == '200'</simple>
                		<removeHeaders pattern="*"/>
		                <unmarshal>
		                    <json library="Jackson" unmarshalTypeName="cl.coopeuch.integracion.apibuk.ConsultarApiBukResponse"/>
		                </unmarshal>
		                <bean method="generarResponseConsultar" ref="beanRouteFacade"/>
		                <unmarshal>
		                    <jaxb contextPath="cl.coopeuch.integracion.wsfuncionario.wsdl"/>
		                </unmarshal>
                	</when>
                	<otherwise>
                		 <removeHeaders pattern="*"/>
                		 <log message="asdasdasd"/>
		                <unmarshal>
		                    <json library="Jackson" unmarshalTypeName="cl.coopeuch.integracion.apibuk.ConsultarApiBukErrorResponse"/>
		                </unmarshal>   
		                 <log message="asdasdasd bbbbbbbbbbbbbb"/>
		                <throwException
                            exceptionType="cl.coopeuch.integracion.wsfuncionario.exception.ConsultarApiBukException"
                            message="${body.getErrors()}"/>           		
                	</otherwise>
                </choice>
               <doCatch>
                    <exception>cl.coopeuch.integracion.wsfuncionario.exception.ConsultarApiBukException</exception>
                    <setProperty propertyName="codigoError">
                        <constant>419</constant>
                    </setProperty>
                    <to uri="direct:excepcion"/>
               </doCatch> 
               <doCatch>
                    <exception>java.lang.IllegalArgumentException</exception>
                    <to uri="direct:excepcion"/>
                </doCatch>
                <doCatch>
                    <exception>java.io.IOException</exception>
                    <setProperty propertyName="codigoError">
                        <constant>504</constant>
                    </setProperty>
                    <to uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="AconsultarDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="consultarCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="toConsultarExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        
        <route id="excepcion">
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <doTry id="excepcionTry">
                <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
                <marshal id="excepcionMarshalJson">
                    <json library="Jackson"/>
                </marshal>
                <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
                <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>
                <log message="(${body})"/>
                <bean id="excepcionBeanExcepcion"
                      method="excepcionCrear" ref="beanRouteFacade"/>
                <doCatch id="excepcionDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setBody id="exceptionFinalSetBodyError">
                        <simple>${exception}, Body -&gt; ${body}</simple>
                    </setBody>
                    <log id="excepcionLog" loggingLevel="ERROR" message="Ha ocurrido un error al escribir en la cola de errores o en la ejecucion del servicio: ${body}"/>
                </doCatch>
            </doTry>
        </route>
        
    </camelContext>
</blueprint>
