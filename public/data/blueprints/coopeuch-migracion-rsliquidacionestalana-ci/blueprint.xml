<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cm:property-placeholder id="propertyGlobal" persistent-id="global"
        placeholder-prefix="{[" placeholder-suffix="]}" update-strategy="reload"/>
    <cm:property-placeholder id="propertyLocal"
        persistent-id="wsliquidacionestalana" placeholder-prefix="[{"
        placeholder-suffix="}]" update-strategy="reload"/>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="beanAMQ">
        <property name="brokerURL" value="{[amq.broker.url]}"/>
        <property name="userName" value="{[amq.username]}"/>
        <property name="password" value="{[amq.password]}"/>
        <property name="usePooledConnection" value="true"/>
    </bean>
    <bean
        class="cl.coopeuch.integracion.wsliquidacionestalana.util.RouteFacade" id="beanRouteFacade"/>
    <camelcxf:cxfEndpoint address="/WSLiquidacionesTalana"
        id="endpointWSLiquidacionesTalana"
        serviceClass="cl.coopeuch.integracion.wsliquidacionestalana.wsdl.WSLiquidacionesTalanaSOAPPortType" wsdlURL="etc/wsdl/WSLiquidacionesTalana.wsdl">
        <camelcxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </camelcxf:properties>
    </camelcxf:cxfEndpoint>
    <camelcxf:rsClient address="{{consulta.liquidaciones.endpoint}}"
        id="endpointConsultarDocumentos" loggingFeatureEnabled="true">
        <camelcxf:providers>
            <bean
                class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" id="jsonProvider"/>
        </camelcxf:providers>
    </camelcxf:rsClient>
    <camelcxf:rsClient address="{{consulta.wsdocumento}}" id="documento" loggingFeatureEnabled="true">
        <camelcxf:providers>
            <bean
                class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" id="jsonProvider"/>
        </camelcxf:providers>
    </camelcxf:rsClient>
    <camelcxf:rsServer address="/RSLiquidacionesTalana"
        id="endpointRSLiquidacionesTalana" serviceClass="cl.coopeuch.integracion.wsliquidacionestalana.wsdl.WSLiquidacionesTalanaSOAPPortType"/>
    <camelContext id="servicio-wsliquidacionestalana" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="inicio-soap">
            <from id="inicioFromSoap" uri="cxf:bean:endpointWSLiquidacionesTalana"/>
            <to id="soapToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="inicio-rest">
            <from id="restInicio" uri="cxfrs:bean:endpointRSLiquidacionesTalana"/>
            <to id="restToInicioWs" uri="direct:cxf-inicio"/>
        </route>
        <route id="cxf-inicio">
            <from id="inicioFromServicio" uri="direct:cxf-inicio"/>
            <doTry id="inicioTry">
                <setProperty id="inicioSetRequest" propertyName="requestEntrada">
                    <simple>${body}</simple>
                </setProperty>
                <setProperty id="inicioSetTipoRequest" propertyName="tipoRequest">
                    <simple>$simple{body.get(0).class.getSimpleName()}</simple>
                </setProperty>
                <setBody id="inicioSetBody">
                    <simple>$simple{body.get(0)}</simple>
                </setBody>
                <choice id="inicioChoiceOperacion">
                    <when id="inicioWhenOperacionCrear">
                        <simple>${header.operationName} == 'generarDocumento'</simple>
                        <toD id="_to1" uri="direct:generarDocumento"/>
                    </when>
                    <otherwise id="inicioOtherwise">
                        <throwException
                            exceptionType="java.lang.Exception"
                            id="throwExceptionOperacionInvalida" message="La operacion solicitada es invalida"/>
                    </otherwise>
                </choice>
                <doCatch id="inicioDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="inicioCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <to id="inicioToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="crear" streamCache="true">
            <from id="crearFrom" uri="direct:generarDocumento"/>
            <doTry id="crearTry">
                <!-- <setProperty propertyName=""><simple></simple></setProperty> -->
                <setProperty id="_setProperty1" propertyName="rut">
                    <xpath resultType="String">//generarDocumentoRequest/rut</xpath>
                </setProperty>
                <setProperty id="_setProperty2" propertyName="mes">
                    <xpath resultType="String">//generarDocumentoRequest/mes</xpath>
                </setProperty>
                <setProperty id="_setProperty3" propertyName="anio">
                    <xpath resultType="String">//generarDocumentoRequest/anio</xpath>
                </setProperty>
                <setProperty id="_setProperty4" propertyName="userId">
                    <xpath resultType="String">//generarDocumentoRequest/userId</xpath>
                </setProperty>
                <setProperty id="_setProperty5" propertyName="canalLLamada">
                    <xpath resultType="String">//generarDocumentoRequest/canalLLamada</xpath>
                </setProperty>
                <setProperty id="_setProperty6" propertyName="urlt">
                    <simple resultType="String">{{apiliquidaciones}}</simple>
                </setProperty>
                <setProperty id="_setProperty7" propertyName="apikey">
                    <simple resultType="String">{{apikey}}</simple>
                </setProperty>
                <removeHeaders id="_removeHeaders1" pattern="*"/>
                <bean id="_bean3" method="validarIngreso" ref="beanRouteFacade"/>
                <!-- Realiza la llamada HTTP GET -->
                <choice id="_choice1">
                    <when id="_when1">
                        <simple>${headers.validacion}</simple>
                        <setProperty id="_setProperty14" propertyName="codigo">
                            <simple resultType="Integer">500</simple>
                        </setProperty>
                        <setProperty id="_setProperty15" propertyName="descripcion">
                            <simple>${headers.validacion}</simple>
                        </setProperty>
                        <throwException
                            exceptionType="java.lang.NullPointerException"
                            id="_throwException1" message="${property.descripcion}"/>
                        <stop id="_stop2"/>
                    </when>
                </choice>
                <setProperty id="_setProperty10" propertyName="urlservicio">
                    <simple resultType="String">{{consulta.liquidaciones.endpoint}}</simple>
                </setProperty>
                <setHeader headerName="CamelHttpQuery" id="_setHeader1">
                    <simple>rut=${property.rut}&amp;mes=${property.mes}&amp;anio=${property.anio}</simple>
                </setHeader>
                <setHeader headerName="CamelHttpMethod" id="_setHeader5">
                    <constant>GET</constant>
                </setHeader>
                     <setHeader
                    headerName="{{consulta.liquidaciones.apikey.header}}" id="_setHeader5">
                    <simple resultType="String" trim="true">{{consulta.liquidaciones.apikey.value}}</simple>
                </setHeader>
                <toD id="_to2" uri="cxfrs:${property.urlservicio}?bridgeEndpoint=true&amp;throwExceptionOnFailure=false"/>
                <log id="_log2" loggingLevel="ERROR" message="Salid del servicio  ${headers} +  ${body}"/>
                <convertBodyTo id="_convertBodyTo4" type="java.lang.String"/>
                <bean id="_bean2" method="responseGenerar" ref="beanRouteFacade"/>
                <convertBodyTo id="_convertBodyTo2" type="String"/>
                <setHeader headerName="Content-Type" id="_setHeader2">
                    <constant>application/json</constant>
                </setHeader>
                <removeHeaders id="_removeHeaders1" pattern="*"/>
                <setHeader headerName="Content-Type" id="_setHeader3">
                    <constant>application/json</constant>
                </setHeader>
                <setHeader headerName="Exchange.HTTP_METHOD" id="_setHeader4">
                    <constant>POST</constant>
                </setHeader>
                <to id="_to3" uri="cxfrs:bean:documento?bridgeEndpoint=true"/>
                <unmarshal id="_unmarshal1">
                    <xmljson forceTopLevelObject="true"/>
                </unmarshal>
                <choice id="_choice1">
                    <when id="_when1">
                        <simple>${bodyAs(String)} contains 'error'</simple>
                        <setProperty id="_setProperty13" propertyName="descripcion">
                            <xpath resultType="String">/o/generarPDFResponse/error/descripcion</xpath>
                        </setProperty>
                        <setProperty id="_setProperty16" propertyName="codigo">
                            <xpath resultType="Integer">/o/generarPDFResponse/error/codigo</xpath>
                        </setProperty>
                        <throwException
                            exceptionType="java.lang.RuntimeException"
                            id="_throwException1" message="${property.descripcion}"/>
                    </when>
                    <otherwise id="_otherwise1">
                        <log id="_log1" loggingLevel="DEBUG" message="Salid del servicio  ${body}"/>
                    </otherwise>
                </choice>
                <setProperty id="_setProperty8" propertyName="documento">
                    <xpath resultType="String">//o/generarPDFResponse/documento</xpath>
                </setProperty>
                <setProperty id="_setProperty9" propertyName="id">
                    <xpath resultType="String">//o/generarPDFResponse/id</xpath>
                </setProperty>
                <bean id="_bean1" method="responseGenerarpdf" ref="beanRouteFacade"/>
                <stop id="_stop1"/>
                <doCatch id="crearDoCatchAMQ">
                    <exception>org.apache.camel.ExchangeTimedOutException</exception>
                    <setProperty id="crearCodigoErrorAMQ" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="toCrearExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="Validator">
                    <exception>java.lang.NullPointerException</exception>
                    <setProperty id="crearCodigoErrorAMQ" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="toCrearExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="ValidatorDocuemento">
                    <exception>java.lang.RuntimeException</exception>
                    <setProperty id="_setProperty12" propertyName="codigoError">
                        <constant>502</constant>
                    </setProperty>
                    <to id="toCrearExcepcionAMQ" uri="direct:excepcion"/>
                </doCatch>
                <doCatch id="crearDoCatch">
                    <exception>java.lang.Exception</exception>
                    <setProperty id="crearCodigoError" propertyName="codigoError">
                        <constant>500</constant>
                    </setProperty>
                    <setProperty id="_setProperty18" propertyName="codigo">
                        <simple resultType="Integer">500</simple>
                    </setProperty>
                    <setProperty id="_setProperty15" propertyName="descripcion">
                        <simple resultType="String">Error de  servicio </simple>
                    </setProperty>
                    <choice id="_choice2">
                        <when id="_when2">
                            <simple>${header.CamelHttpResponseCode} == 404</simple>
                            <setProperty id="_setProperty11" propertyName="codigo">
                                <simple resultType="Integer">404</simple>
                            </setProperty>
                            <setProperty id="_setProperty17" propertyName="descripcion">
                                <simple resultType="String">No existen documentos para el periodo consultado</simple>
                            </setProperty>
                        </when>
                        <when id="_when2">
                            <simple>${header.CamelHttpResponseCode} != 200</simple>
                            <!-- Establecer el código y descripción de error -->
                            <setProperty id="_setProperty17" propertyName="codigo">
                                <simple resultType="Integer">419</simple>
                            </setProperty>
                            <setProperty id="_setProperty19" propertyName="descripcion">
                                <simple resultType="String">El servicio externo ha respondido con error</simple>
                            </setProperty>
                        </when>
                    </choice>
                    <to id="crearToExcepcion" uri="direct:excepcion"/>
                </doCatch>
            </doTry>
        </route>
        <route id="excepcion">
            <!-- <doTry id="excepcionTry"> -->
            <from id="excepcionfrom" uri="direct:excepcion"/>
            <log id="_log4" loggingLevel="INFO" message="Recibe  exepcion de    java   ${body} "/>
            <bean id="beanExceptionAmq" method="excepcionAmq" ref="beanRouteFacade"/>
            <marshal id="excepcionMarshalJson">
                <json library="Jackson"/>
            </marshal>
            <convertBodyTo id="excepcionConvertTo" type="java.lang.String"/>
<!--            <to id="excepcionToAmqFault" uri="beanAMQ:{{amq.queue.fault}}?errorHandlerLoggingLevel=TRACE&amp;exchangePattern=InOnly"/>-->
            <bean id="excepcionBeanExcepcion" method="excepcionCrear" ref="beanRouteFacade"/>
            <!-- <doCatch id="excepcionDoCatch"> -->
            <!-- <exception>java.lang.Exception</exception> -->
            <!-- <setBody id="exceptionFinalSetBodyError"> -->
            <!-- <simple>${exception}, Body -&gt; ${body}</simple> -->
            <!-- </setBody> -->
            <!-- <log id="excepcionLog" loggingLevel="ERROR" -->
            <!-- message="Ha ocurrido un error al escribir en la cola de errores o 
				en la ejecucion del servicio: ${body}" /> -->
            <!-- </doCatch> -->
            <!-- </doTry> -->
        </route>
    </camelContext>
</blueprint>